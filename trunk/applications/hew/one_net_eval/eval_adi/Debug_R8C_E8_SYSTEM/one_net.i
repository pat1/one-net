#line 1 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"
 
 

 





























 












#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"



 
 

 





























 









 
 
 
 
 



 
 
 






 



 


#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/undefine_all_defines.h"
 
 

 





























 








 
 
 
 
 



 










 














 




 




 









 




 





 
 


















 









 










 
























 















 











































































































 




























































 



























 










 






 































































































































 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 


 
 
 

 

#line 71 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"





 
 
 

 

 
 
 
 






 



 











 
 




 




 





 








 





 
 











 





 
 
 







 
 

 
 
 
 
 
 
 





 
 
 
 
 
 
 




 
 
 
 
 
 
 



 
 
 
 





 
 








 
 











 




 











































 


























































 




 

























































 









	



	
	 




	 







 

 














 












 
 
 
 

 
 
 



 
 
 
 



 




 
 
 



 
 
 
 
 
 
 








	 




	 




	 




	 





	     




	     





	 




	 



 





	 
	 





	 
	 



	 




     

	     




	     





	    	 




		     




		
	     




	     




	     




	     




	     




    	 





	 




	 




	 




	 




	 




	 






	 




	 




	



 

 
 
 

 
 
 

 
 
 





 


#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/test_defines.h"
 
 

 





























 








 
 
 
 
 



 
 
 
 
 


 









 





 





 























 





 





 











 

 
 











 





































 















 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 


 
 
 

 

#line 696 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"



 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 


 
 
 

 




#line 47 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"


#line 1 "D:/One-Net/Source/trunk/one_net/mac/one_net.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/one_net/mac/one_net.h"


 
 

 





























 












































































































#line 1 "D:/One-Net/Source/trunk/one_net/mac/one_net_status_codes.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/one_net/mac/one_net_status_codes.h"


 
 
 

 





























 











 
 
 
 
 

 
 
 

 
 
 
 
 

typedef enum
{
    ONS_SUCCESS,                     

    ONS_BAD_PARAM,                   
    ONS_NOT_INIT,                    
    ONS_ALREADY_IN_PROGRESS,         
    ONS_INVALID_DATA,                
    ONS_MORE,                        
    ONS_END,                         
    ONS_RSRC_FULL,                   
    ONS_CANCELED,                    
    ONS_TIME_OUT,                    
    ONS_INTERNAL_ERR,                

    ONS_UNHANDLED_VER,               
    ONS_CRC_FAIL,                    
    ONS_RX_STAY_AWAKE,               
    ONS_RX_NACK,                     
    ONS_INCORRECT_NONCE,             

    ONS_SINGLE_END,                  
    ONS_SINGLE_FAIL,                 

    ONS_BLOCK_END,                   
    ONS_BLOCK_FAIL,                  

    ONS_STREAM_END,                  
    ONS_STREAM_FAIL,                 

    ONS_TXN_QUEUED,                  
    ONS_TXN_DOES_NOT_EXIST,          

    ONS_BAD_RAW_PKT_LEN,             
    ONS_BAD_RAW_DATA,                
    ONS_BAD_ENCODING,                
    ONS_BAD_PKT_TYPE,                
    ONS_BAD_PKT,                     
    ONS_UNHANDLED_PKT,               

    ONS_UNICAST_ADDR,                
    ONS_MULTICAST_ADDR,              
    ONS_BROADCAST_ADDR,              
    ONS_BAD_ADDR,                    
    ONS_INCORRECT_ADDR,              
    ONS_NID_FAILED,                  
    ONS_DID_FAILED,                  
    
    ONS_DEVICE_LIMIT,                
    ONS_NOT_JOINED,                  

    ONS_READ_ERR,                    
    ONS_WRITE_ERR,                   
    ONS_SNGH_INTERNAL_ERR            
} one_net_status_t;

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 
 



#line 149 "D:/One-Net/Source/trunk/one_net/mac/one_net.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"


 
 
 

 





























 








 
 
 
 
 

 
 


 
 
 

 
 
 
 
 

typedef unsigned char   UInt8;
typedef signed char     SInt8;
typedef unsigned int    UInt16;
typedef int             SInt16;
typedef unsigned long   UInt32;
typedef long            SInt32;
typedef float           Float32;

typedef UInt32			tick_t;

enum
{
    FALSE = 0,
    TRUE
};

typedef UInt8 BOOL;

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 


#line 150 "D:/One-Net/Source/trunk/one_net/mac/one_net.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_xtea.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_xtea.h"


 
 

 





























 









#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"


















































































































#line 50 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_xtea.h"


 
 
 
 
 

enum
{
     
    ONE_NET_XTEA_KEY_LEN = 16,

     
    ONE_NET_XTEA_BLOCK_SIZE = 8
};

 
 
 

 
 
 
 
 

 
typedef UInt8 one_net_xtea_key_t[ONE_NET_XTEA_KEY_LEN];

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

void one_net_xtea_encipher(const UInt8 ROUNDS, UInt8 * data,
  const one_net_xtea_key_t * const KEY);
void one_net_xtea_decipher(const UInt8 ROUNDS, UInt8 * data,
  const one_net_xtea_key_t * const KEY);

 
 
 

 



#line 151 "D:/One-Net/Source/trunk/one_net/mac/one_net.h"


 
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 



enum {
    ONE_NET_VERSION_MAJOR =     1,   
    ONE_NET_VERSION_MINOR =     6,   
    ONE_NET_VERSION_REVISION =  2,   
    ONE_NET_VERSION_BUILD =     25   
};










enum
{

     
    ON_VERSION = 0x05,





     
     
    ON_PARAM_VERSION = 0x0002,

    
     
    ON_INVITE_PKT_VERSION = 0x00,

     
    ON_MAX_RETRY = 8,

     
     
    ON_MAX_DATA_RATE_TRIES = 8,

     
    ON_MAX_NONCE = 63,

     
    ON_INVALID_NONCE = 0xFF,

     
    ON_MAX_HOPS_LIMIT = 7,

     
    ON_INVALID_HOPS = ON_MAX_HOPS_LIMIT + 1,

     
    ON_FIRST_MH_MAX_HOPS_COUNT = 2,
    
     
    ONE_NET_XTEA_KEY_FRAGMENT_SIZE = 4
};

 
enum
{
     
    ONE_NET_RAW_NID_LEN = 5,

     
    ONE_NET_RAW_DID_LEN = 2,

     
    ONE_NET_RAW_SID_LEN = 6,


     
    ON_ENCODED_NID_LEN = 6,

     
    ON_ENCODED_DID_LEN = 2,

     
    ON_ENCODED_SID_LEN = 8
};

 
enum
{
     
    ON_ENCODED_PID_SIZE = 1,

     
    ON_RAW_HOPS_SIZE = 1,

     
    ON_ENCODED_HOPS_SIZE = 1,

     
    ON_ENCODED_INVITE_PKT_LEN = 48,

     
    ON_ENCODED_SINGLE_DATA_LEN = 26,


         
         
        ON_MAX_RAW_PLD_LEN = 32,







         
        ONE_NET_MAX_ENCODED_PKT_LEN = 58 + ON_ENCODED_HOPS_SIZE,





     
    ON_ACK_NACK_LEN = 17,

     
    ON_TXN_ACK_LEN = 15,


         
         
         
        ON_MIN_ENCODED_PKT_SIZE = ON_ACK_NACK_LEN + ON_ENCODED_HOPS_SIZE,







     
    ON_DATA_RATE_PKT_LEN = 20,

     
    ONE_NET_ENCODED_DST_DID_IDX = 4,

     
    ON_ENCODED_NID_IDX = ONE_NET_ENCODED_DST_DID_IDX + ON_ENCODED_DID_LEN,

     
    ON_ENCODED_SRC_DID_IDX = ON_ENCODED_NID_IDX + ON_ENCODED_NID_LEN,

     
    ONE_NET_ENCODED_PID_IDX = ON_ENCODED_SRC_DID_IDX + ON_ENCODED_DID_LEN,

     
    ON_PLD_IDX = 15
};

 
enum
{
     
     
    ON_RAW_INVITE_SIZE = 25,

     
     
     
     
    ON_ENCODED_INVITE_SIZE = 33,

     
    ON_INVITE_DATA_LEN = 23,

     
    ON_INVITE_VERSION_IDX = 0,

     
    ON_INVITE_ASSIGNED_DID_IDX = 1,

     
    ON_INVITE_KEY_IDX = 3,

     
    ON_INVITE_KEEP_ALIVE_IDX = 19,

     
    ON_INVITE_CRC_IDX = 23
};

 
enum
{
     
     
    ON_RAW_PLD_HDR_SIZE = 3,


     
     
    ON_RAW_SINGLE_PLD_SIZE = 9,

     
    ON_ENCODED_SINGLE_PLD_SIZE = 11,

     
     
    ONE_NET_RAW_SINGLE_DATA_LEN = 5,

     
     
    ON_RAW_BLOCK_STREAM_PLD_SIZE = 33,

     
    ON_ENCODED_BLOCK_STREAM_PLD_SIZE = 43,

     
     
    ONE_NET_RAW_BLOCK_STREAM_DATA_LEN = 29,

     
     
    ON_MAX_BLOCK_TRANSFER_LEN = 65535,

     
    ON_MAX_ADMIN_PLD_LEN = 4,

     
     
    ON_RESP_NONCE_LEN = 2,

     
     
    ON_RESP_NONCE_WORD_SIZE = 2
};

 
enum
{
     
    ON_PLD_CRC_SIZE = 1,

     
    ON_PLD_INIT_CRC = 0xFF,

     
    ON_PLD_CRC_ORDER = 8,

     
    ON_PARAM_INIT_CRC = 0xFF,

     
    ON_PARAM_CRC_ORDER = 8
};

 
enum
{
     
    ON_RESP_TXN_NONCE_IDX = 0,

     
    ON_RESP_RESP_NONCE_HIGH_IDX = 0,

     
    ON_RESP_RESP_NONCE_LOW_IDX = 1,


     
    ON_PLD_CRC_IDX = 0,

     
    ON_PLD_TXN_NONCE_IDX = 1,

     
    ON_PLD_RESP_NONCE_HIGH_IDX = 1,

     
    ON_PLD_RESP_NONCE_LOW_IDX = 2,


     
    ON_PLD_MSG_TYPE_IDX = 2,

     
    ON_PLD_DATA_IDX = 3,

     
     
     
    ON_TXN_NONCE_SHIFT = 2,

     
    ON_RESP_NONCE_HIGH_SHIFT = 4,

     
    ON_RESP_NONCE_LOW_SHIFT = 4,

     
     
    ON_TXN_NONCE_BUILD_MASK = 0xFC,

     
     
    ON_TXN_NONCE_PARSE_MASK = 0x3F,

     
     
    ON_RESP_NONCE_BUILD_HIGH_MASK = 0x03,

     
     
    ON_RESP_NONCE_PARSE_HIGH_MASK = 0x30,

     
     
    ON_RESP_NONCE_BUILD_LOW_MASK = 0xF0,

     
     
    ON_RESP_NONCE_PARSE_LOW_MASK = 0x0F,

     
     
    ON_PLD_MSG_TYPE_MASK = 0x0F
};

 







enum
{
     
    ON_ADMIN_MSG_ID_IDX = 0,

     
    ON_ADMIN_DATA_IDX = 1,


     
    ON_STATUS_VER_IDX = 0,

     
    ON_STATUS_MAX_DATA_RATE_IDX = 1,

     
    ON_STATUS_FEATURES_IDX = 2,


     
    ON_SETTINGS_DATA_RATE_IDX = 0,

     
    ON_SETTINGS_MASTER_DATA_RATE_IDX = 1,

     
    ON_SETTINGS_FLAG_IDX = 2,


     
    ON_PEER_DID_IDX = 0,

     
     
    ON_PEER_PEER_UNIT_IDX = 2,

     
     
    ON_PEER_SRC_UNIT_IDX = 3,

     
    ON_PEER_SETTING_DATA_RATE_IDX = 2,


     
    ON_BLOCK_STREAM_DATA_TYPE_IDX = 0,

     
    ON_BLOCK_LEN_IDX = 2,


     
    ON_DATA_RATE_DATA_RATE_IDX = 0,

     
    ON_DATA_RATE_DID_IDX = 1,

     
    ON_DATA_RATE_FLAG_IDX = 3,

     
    ON_DATA_RATE_RESULT_IDX = 3,
};

 
 
enum
{
    ON_MH_REPEATER = 0x40,           
    ON_MH_CAPABLE = 0x20,            
    ON_MAC_FEATURES = 0x10           
};

 
enum
{
     
    ON_JOINED = 0x80,

     
     
    ON_SEND_TO_MASTER = 0x40
};

 
enum
{
     
    ON_MH_DATA_RATE_TEST_FLAG = 0x80
};

 
enum
{
     
    ON_DATA_RATE_WORD_SIZE = 1,

     
    ON_DATA_RATE_IDX = 15,

     
     
    ON_DATA_RATE_SHIFT = 2,

     
    ON_TEST_PATTERN_IDX = 1,

     
    ON_TEST_PATTERN_SIZE = 4,

     
    ON_TEST_PATTERN = 0xE1
};


 
enum
{
     
    ON_MAX_HOPS_SHIFT = 5,

     
    ON_HOPS_LEFT_SHIFT = 2,

     
    ON_MAX_HOPS_BUILD_MASK = 0xE0,

     
    ON_MAX_HOPS_PARSE_MASK = 0x07,

     
    ON_HOPS_LEFT_BUILD_MASK = 0x1C,

     
    ON_HOPS_LEFT_PARSE_MASK = 0x07
};


enum
{
     
    ONE_NET_DEV_UNIT = 0x0F
};

    
 
 
 

 
 
 
 
 

 


typedef enum
{

     
    ONE_NET_ENCODED_MASTER_INVITE_NEW_CLIENT = 0xB4,


     
    ONE_NET_ENCODED_SINGLE_DATA_ACK = 0xBC,

     
     
     
    ONE_NET_ENCODED_SINGLE_DATA_ACK_STAY_AWAKE = 0xB3,

     
     
    ONE_NET_ENCODED_SINGLE_DATA_NACK = 0xBA,

     
     
     
    ONE_NET_ENCODED_SINGLE_TXN_ACK = 0xB5,

     
    ONE_NET_ENCODED_SINGLE_DATA = 0xB9,

     
    ONE_NET_ENCODED_REPEAT_SINGLE_DATA = 0xB6,

     
    ONE_NET_ENCODED_BLOCK_DATA = 0xB2,

     
    ONE_NET_ENCODED_REPEAT_BLOCK_DATA = 0xC4,

     
    ONE_NET_ENCODED_BLOCK_DATA_ACK = 0xCC,

     
     
    ONE_NET_ENCODED_BLOCK_DATA_NACK = 0xC3,

     
     
     
    ONE_NET_ENCODED_BLOCK_TXN_ACK = 0xCA,

     
    ONE_NET_ENCODED_STREAM_DATA = 0xC5,

     
     
    ONE_NET_ENCODED_STREAM_KEEP_ALIVE = 0xC9,

     
    ONE_NET_ENCODED_DATA_RATE_TEST = 0xC6,


     
     
     
    ONE_NET_ENCODED_MH_MASTER_INVITE_NEW_CLIENT = 0x54,


     
     
    ONE_NET_ENCODED_MH_SINGLE_DATA_ACK = 0x5C,

     
     
     
     
    ONE_NET_ENCODED_MH_SINGLE_DATA_ACK_STAY_AWAKE = 0x53,

     
     
    ONE_NET_ENCODED_MH_SINGLE_DATA_NACK = 0x5A,

     
     
     
    ONE_NET_ENCODED_MH_SINGLE_TXN_ACK = 0x55,

     
    ONE_NET_ENCODED_MH_SINGLE_DATA = 0x59,

     
    ONE_NET_ENCODED_MH_REPEAT_SINGLE_DATA = 0x56,

     
    ONE_NET_ENCODED_MH_BLOCK_DATA = 0x52,

     
    ONE_NET_ENCODED_MH_REPEAT_BLOCK_DATA = 0x94,

     
     
    ONE_NET_ENCODED_MH_BLOCK_DATA_ACK = 0x9C,

     
     
    ONE_NET_ENCODED_MH_BLOCK_DATA_NACK = 0x93,

     
     
     
    ONE_NET_ENCODED_MH_BLOCK_TXN_ACK = 0x9A,

     
    ONE_NET_ENCODED_MH_STREAM_DATA = 0x95,

     
     
    ONE_NET_ENCODED_MH_STREAM_KEEP_ALIVE = 0x99,

     
    ONE_NET_ENCODED_MH_DATA_RATE_TEST = 0x96,


     
     
     
    ONE_NET_ENCODED_SINGLE_DATA_NACK_RSN = 0x64,

     
     
     
    ONE_NET_ENCODED_BLOCK_DATA_NACK_RSN = 0x6C,


     
     
     
    ONE_NET_ENCODED_MH_SINGLE_DATA_NACK_RSN = 0x63,

     
     
     
    ONE_NET_ENCODED_MH_BLOCK_DATA_NACK_RSN = 0x6A













































































































































} on_pid_t;


 


typedef enum
{
    ON_APP_MSG,                      
    ON_ADMIN_MSG,                    
    ON_EXTENDED_ADMIN_MSG,           
    
    ON_INVALID_MSG_TYPE              
} on_msg_type_t;


 


typedef enum
{
     
    ON_STATUS_QUERY = 0x00,

     
     
     
    ON_STATUS_RESP = 0x01,

     
    ON_SETTINGS_QUERY = 0x02,

     
     
    ON_SETTINGS_RESP = 0x03,

     
     
    ON_CHANGE_SETTINGS = 0x04,

     
    ON_FRAGMENT_DELAY_QUERY = 0x05,

     
    ON_FRAGMENT_DELAY_RESP = 0x06,

     
    ON_CHANGE_LOW_FRAGMENT_DELAY = 0x07,

     
     
     
    ON_KEEP_ALIVE_QUERY = 0x08,

     
     
     
    ON_KEEP_ALIVE_RESP = 0x09,

     
    ON_CHANGE_KEEP_ALIVE = 0x0A,

     
     
     
    ON_NEW_KEY_FRAGMENT = 0x0B,


     
     
    ON_ASSIGN_PEER = 0x0C,

     
     
    ON_UNASSIGN_PEER = 0x0D,


     
     
    ON_SEND_BLOCK_LOW = 0x0E,

     
     
    ON_RECV_BLOCK_LOW = 0x0F,

     
     
    ON_SEND_STREAM_LOW = 0x10,

     
     
    ON_RECV_STREAM_LOW = 0x11,

     
    ON_END_STREAM = 0x12,

     
    ON_INIT_DATA_RATE_TEST = 0x13,

     
    ON_DATA_RATE_RESULT = 0x14,

     
    ON_ADMIN_UNUSED0,

     
    ON_ADMIN_UNUSED1,

     
    ON_ADMIN_UNUSED2,

     
    ON_ADMIN_UNUSED3,

     
    ON_ADMIN_UNUSED4,

     
    ON_CHANGE_PEER_DATA_RATE = 0x1A,

     
    ON_CHANGE_HIGH_FRAGMENT_DELAY = 0x1B,

     
     
    ON_SEND_BLOCK_HIGH = 0x1C,

     
     
    ON_RECV_BLOCK_HIGH = 0x1D,

     
     
    ON_SEND_STREAM_HIGH = 0x1E,

     
     
    ON_RECV_STREAM_HIGH = 0x1F,


     
     
    ON_ASSIGN_MH_PEER =0x20,

    
     
    ON_STREAM_KEY_QUERY = 0x21,

     
    ON_RM_DEV = 0x22
} on_admin_msg_t;


 


typedef enum
{
     
    ON_CHANGE_STREAM_KEY
} on_extended_admin_msg_t;


 
typedef enum
{
    ONE_NET_DATA_RATE_38_4,          
    ONE_NET_DATA_RATE_76_8,          
    ONE_NET_DATA_RATE_115_2,         
    ONE_NET_DATA_RATE_153_6,         
    ONE_NET_DATA_RATE_192_0,         
    ONE_NET_DATA_RATE_230_4,         

     
     
    ONE_NET_DATA_RATE_LIMIT
} on_data_rate_t;
 
 


 
typedef enum
{
    ON_NO_TXN,                       
    ON_INVITE,                       
    ON_DATA_RATE_TXN,                
    ON_SINGLE,                       
    ON_STREAM,                       
    ON_BLOCK                         
} on_data_t;


 





typedef enum
{
    ONE_NET_NO_PRIORITY,             
    ONE_NET_LOW_PRIORITY,            
    ONE_NET_HIGH_PRIORITY,           
    ONE_NET_SEND_SINGLE_PRIORITY = ONE_NET_HIGH_PRIORITY

} on_priority_t;


 







typedef enum
{
     
    ON_LISTEN_FOR_DATA,


     
    ON_SEND_PKT = 10,

     
    ON_SEND_PKT_WRITE_WAIT,


     
    ON_SEND_SINGLE_DATA_PKT = 20,

     
    ON_SEND_SINGLE_DATA_WRITE_WAIT,

     
    ON_WAIT_FOR_SINGLE_DATA_RESP,


     
    ON_SEND_SINGLE_DATA_RESP = 30,

     
    ON_SEND_SINGLE_DATA_RESP_WRITE_WAIT,

     
     
    ON_WAIT_FOR_SINGLE_DATA_END,


     
    ON_SEND_BLOCK_DATA_PKT = 40,

     
    ON_SEND_BLOCK_DATA_WRITE_WAIT,

     
    ON_WAIT_FOR_BLOCK_DATA_RESP,


     
    ON_SEND_BLOCK_DATA_RESP = 50,

     
    ON_SEND_BLOCK_DATA_RESP_WRITE_WAIT,

     
    ON_WAIT_FOR_BLOCK_DATA_END,


     
    ON_SEND_STREAM_DATA_PKT = 60,

     
    ON_SEND_STREAM_DATA_WRITE_WAIT,

     
    ON_WAIT_FOR_STREAM_DATA_RESP,


     
    ON_SEND_STREAM_DATA_RESP = 70,

     
    ON_SEND_STREAM_DATA_RESP_WRITE_WAIT,


     
    ON_INIT_SEND_DATA_RATE = 80,

     
    ON_SEND_DATA_RATE,

     
    ON_SEND_DATA_RATE_WRITE_WAIT,

     
    ON_RX_DATA_RATE_RESP,


     
    ON_INIT_RX_DATA_RATE = 90,

     
    ON_RX_DATA_RATE,

     
    ON_SEND_DATA_RATE_RESP,

     
    ON_SEND_DATA_RATE_RESP_WRITE_WAIT,


	 
	ON_IDLE,


     
     
     
    ON_JOIN_NETWORK = 500,


     
     
    ON_INIT_STATE = 1000
} on_state_t;

 






typedef enum
{
     
    ONE_NET_SINGLE_BLOCK_ENCRYPT_NONE = 0x00,

     
    ONE_NET_SINGLE_BLOCK_ENCRYPT_XTEA32 = 0x40,

     
    ONE_NET_SINGLE_BLOCK_ENCRYPT_TBD0 = 0x80,

     
    ONE_NET_SINGLE_BLOCK_ENCRYPT_TBD1 = 0xC0
} one_net_single_blk_encryption_t;


 






typedef enum
{
     
    ONE_NET_STREAM_ENCRYPT_NONE = 0x00,

     
    ONE_NET_STREAM_ENCRYPT_XTEA8 = 0x40,

     
    ONE_NET_STREAM_ENCRYPT_TBD0 = 0x80,

     
    ONE_NET_STREAM_ENCRYPT_TBD1 = 0xC0
} one_net_stream_encryption_t;


 
typedef UInt8 one_net_raw_nid_t[ONE_NET_RAW_NID_LEN];

 
typedef UInt8 one_net_raw_did_t[ONE_NET_RAW_DID_LEN];

 
typedef UInt8 one_net_raw_sid_t[ONE_NET_RAW_SID_LEN];

 
typedef UInt8 on_encoded_nid_t[ON_ENCODED_NID_LEN];

 
typedef UInt8 on_encoded_did_t[ON_ENCODED_DID_LEN];

 
typedef UInt8 on_encoded_sid_t[ON_ENCODED_SID_LEN];

 
typedef UInt8 one_net_xtea_key_fragment_t[ONE_NET_XTEA_KEY_FRAGMENT_SIZE];

 





typedef struct
{
     
    UInt8 crc;

     
     
    UInt16 version;

     
    on_encoded_sid_t sid;

     
    UInt8 channel;

     
    UInt8 data_rate;

     
    one_net_xtea_key_t current_key;

     
    UInt8 single_block_encrypt;


         
        one_net_xtea_key_t stream_key;

         
        UInt8 stream_encrypt;

         
        tick_t fragment_delay_low;

         
        tick_t fragment_delay_high;

} on_base_param_t;

 




typedef struct
{
    on_encoded_did_t did;            

    UInt8 expected_nonce;            
    UInt8 last_nonce;                

    UInt8 send_nonce;                
                                     


        UInt8 max_hops;              

} on_sending_device_t;

 
typedef struct
{
     
    UInt8 priority;

     
    UInt8 retry;

     
    UInt8 expected_nonce;
    
     
    UInt8 msg_type;


         
        BOOL send;

         
         
        UInt8 next_txn_timer;

         
         
         
        UInt16 remaining;



         
        UInt8 max_hops;


     
     
     
     
     
    UInt8 data_len;

     
    UInt8 pkt_size;

     
    UInt8 * pkt;
} on_txn_t;



     
    typedef one_net_status_t (*on_pkt_hdlr_t)(const UInt8 PID,
      const on_encoded_did_t * const SRC_DID, UInt8 * const pld,
      on_txn_t ** txn, const UInt8 HOPS_TAKEN);

     
    typedef one_net_status_t (*on_txn_hdlr_t)(on_txn_t ** txn,
      const UInt8 NEXT_NONCE, const one_net_status_t STATUS,
      const UInt8 HOPS_TAKEN);











 
typedef void (*on_data_rate_result_hdlr_t)(const UInt8 RATE,
  const on_encoded_did_t * const DID, const UInt8 RESULT);

 
typedef struct
{
     
    on_pkt_hdlr_t single_data_hdlr;

     
    on_txn_hdlr_t single_txn_hdlr;


         
        on_pkt_hdlr_t block_data_hdlr;

         
        on_txn_hdlr_t block_txn_hdlr;

         
        on_pkt_hdlr_t stream_data_hdlr;

         
        on_txn_hdlr_t stream_txn_hdlr;


     
    on_data_rate_result_hdlr_t data_rate_hdlr;
} on_pkt_hdlr_set_t;


 
 
 
 
typedef enum
{
    CANCEL_INVITE_TIMEOUT,  
    CANCEL_INVITE_CANCELLED_BY_USER,  
    CANCEL_INVITE_CANCELLED_INTERNAL_ERROR,  
    CANCEL_INVITE_OTHER_REASON  	
} cancel_invite_reason_t;



 
 
 

 
 
 
 
 

 
extern const on_encoded_did_t ON_ENCODED_BROADCAST_DID;

 
extern const one_net_raw_did_t ON_RAW_BROADCAST_DID;

 
 
 

 
 
 
 
 

void one_net_init(const on_pkt_hdlr_set_t * const PKT_HDLR);

 
BOOL on_is_my_NID(const on_encoded_nid_t * const NID);
BOOL on_encoded_did_equal(const on_encoded_did_t * const LHS,
  const on_encoded_did_t * const RHS);
one_net_status_t on_validate_dst_DID(const on_encoded_did_t * const DID);

 
one_net_status_t on_encrypt(const UInt8 DATA_TYPE, UInt8 * const data,
  const one_net_xtea_key_t * const key);
one_net_status_t on_decrypt(const UInt8 DATA_TYPE, UInt8 * const data,
  const one_net_xtea_key_t * const key);

 
one_net_status_t on_rx_data_pkt(const on_encoded_did_t * const EXPECTED_SRC_DID,
  on_txn_t ** txn);

 
one_net_status_t on_build_nonces(UInt8 * const data, const UInt8 TXN_NONCE,
  const UInt8 RESP_NONCE);

    one_net_status_t on_build_admin_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 MSG_TYPE, const UInt8 MSG_ID,
      const on_encoded_did_t * const ENCODED_DST,
      const UInt8 TXN_NONCE, const UInt8 RESP_NONCE,
      const UInt8 * const RAW_DATA, const UInt8 DATA_LEN,
      const one_net_xtea_key_t * const KEY, const UInt8 MAX_HOPS);
    one_net_status_t on_build_data_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 MSG_TYPE, const UInt8 PID,
      const on_encoded_did_t * const ENCODED_DST, const UInt8 TXN_NONCE,
      const UInt8 RESP_NONCE, const UInt8 * const RAW_DATA,
      const UInt8 DATA_LEN, const one_net_xtea_key_t * const KEY,
      const UInt8 MAX_HOPS);
    one_net_status_t on_build_response_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 PID, const on_encoded_did_t * const ENCODED_DST,
      const UInt8 TXN_NONCE, const UInt8 EXPECTED_NONCE, const UInt8 MAX_HOPS);
    one_net_status_t on_build_data_rate_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const on_encoded_did_t * const ENCODED_DST, UInt8 data_rate,
      const UInt8 MAX_HOPS);
    one_net_status_t on_build_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 PID, const on_encoded_did_t * const ENCODED_DST,
      const UInt8 * const RAW_DATA, const UInt8 DATA_WORD_SIZE,
      const UInt8 MAX_HOPS);
    one_net_status_t on_build_hops(UInt8 * const hops, const UInt8 MAX_HOPS,
      const UInt8 HOPS_LEFT);






















 
one_net_status_t on_parse_pld(UInt8 * const txn_nonce, UInt8 * const resp_nonce,
  UInt8 * const msg_type, UInt8 * const pld, const UInt8 DATA_TYPE,
  const one_net_xtea_key_t * const KEY);

    one_net_status_t on_read_and_parse_hops(UInt8 * const max_hops,
      UInt8 * const hops_left);
    UInt8 on_hops_taken(void);


 
void on_update_next_txn_time(on_txn_t * const txn);

 
BOOL one_net(on_txn_t ** txn);






















 
 
 

 



#line 49 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"


#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_crc.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_crc.h"


 
 

 





























 











#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"


















































































































#line 52 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_crc.h"


 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

UInt16 one_net_compute_crc(const UInt8 * const DATA, const UInt8 LEN, 
  const UInt16 STARTING_CRC, const UInt8 ORDER);

 
 
 

 



#line 51 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_encode.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_encode.h"


 
 

 





























 











#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_status_codes.h"























































































































































#line 52 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_encode.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"


















































































































#line 53 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_encode.h"


 
 
 
 
 

enum
{
     
    ON_RAW_WORD_SIZE = 6,

     
    ON_ENCODED_WORD_SIZE = 8
};
    
 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

one_net_status_t on_encode(UInt8 * encoded, const UInt8 * RAW, 
  const UInt16 ENCODED_SIZE);
one_net_status_t on_decode(UInt8 * raw, const UInt8 * ENCODED, 
  const UInt16 ENCODED_SIZE);

 
 
 

 



#line 52 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/port_specific/one_net_port_specific.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/port_specific/one_net_port_specific.h"


 
 
 

 





























 














#line 1 "c:/program files/renesas/hew/tools/renesas/nc30wa/v545r01/inc30/stdlib.h"
 













	 
























typedef struct _div_t {
	int quot;
	int rem;
} div_t;
typedef struct _ldiv_t {
	long quot;
	long rem;
} ldiv_t;





typedef unsigned int size_t;






typedef unsigned short wchar_t;









 


void abort(void);
div_t div(int numer, int denom);
void exit(int status);
void _far * calloc(size_t nelem, size_t size);
void free(void _far *ptr);
void _far * malloc(size_t size);
void _far * realloc(void _far *ptr, size_t size);

long strtol(const char _far *s, char  _far * _far *endptr, int base);
long _n_n_strtol(const char _near *s, char  _near * _near *endptr, int base);
long _n_f_strtol(const char _near *s, char  _near * _far *endptr, int base);
long _f_n_strtol(const char _far *s, char _far * _near *endptr, int base);
unsigned long strtoul(const char _far *s, char _far * _far *endptr, int base);
unsigned long _n_n_strtoul(const char _near *s, char  _near * _near *endptr, int base);
unsigned long _n_f_strtoul(const char _near *s, char  _near  * _far *endptr, int base);
unsigned long _f_n_strtoul(const char _far *s, char  _far * _near *endptr, int base);
double strtod(const char _far *s, char _far * _far *endptr);
double _n_n_strtod(const char _near *s, char _near * _near *endptr);
double _n_f_strtod(const char _near *s, char _near * _far *endptr);
double _f_n_strtod(const char _far *s, char  _far * _near *endptr);

int atoi(const char _far *s);
long atol(const char _far *s);
double atof(const char _far *s);
int abs(int n);
long labs(long n);
ldiv_t ldiv(long numer, long denom);
void qsort(void _far *base, size_t nelem, size_t size, int (*cmp)(const void _far *e1, const void _far *e2));
void *bsearch(const void _far *key, const void _far *base, size_t nelem, size_t size, int (*cmp)(const void _far *ck, const void _far *ce));
int mblen(const char _far *s, size_t n);
int mbtowc(wchar_t _far *pwc, const char _far *s, size_t n);
int wctomb(char _far *s, wchar_t wchar);
size_t wcstombs(char _far *s, const wchar_t _far *wcs, size_t n);
size_t mbstowcs(wchar_t _far *wcs, const char _far *s, size_t n);
int rand(void);
void srand(unsigned int);

float strtof(const char _far *s, char _far * _far *endptr);
float _n_n_strtof(const char _near *s, char _near * _near *endptr);
float _n_f_strtof(const char _near *s, char _near * _far *endptr);
float _f_n_strtof(const char _far *s, char  _far * _near *endptr);
float atoff(const char _far *s);


 









#pragma INLINE __buildin_abs()
int __buildin_abs(int n)
{
	return (((int)(n) < 0) ? -((int)(n)) : ((int)(n)));
}

#pragma INLINE __buildin_labs()
long __buildin_labs(long n)
{
	return (((long)(n) < 0L) ? -((long)(n)) : ((long)(n)));
}


 








#line 56 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/port_specific/one_net_port_specific.h"


#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_port_const.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_port_const.h"

 





 
 
 

 





























 













#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 60 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_port_const.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/tick.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/tick.h"


 
 
 

 





























 









#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"


















































































































#line 51 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/tick.h"


 
 
 
 
 

 


enum
{
    TICK_1MS = 1,                    
    TICK_1S = 1000                   
};

enum
{
     
    NOP_COUNT_MS = 325,

     
     
    NOP_COUNT_100S_US = 45
};

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

void init_tick(void);

 









 











 











 









 









 












 










tick_t get_tick_count(void);

void delay_ms(UInt16 count);
void delay_100s_us(UInt16 count);

 
 
 


#line 61 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_port_const.h"


 
 
 
 
 

enum
{
     
     
    ONE_NET_WAIT_FOR_SOF_TIME = ((10) / TICK_1MS) ,

     
    ONE_NET_MAX_DATA_RATE = ONE_NET_DATA_RATE_38_4
};

 
enum
{
     
     
    ONE_NET_CLR_CHANNEL_TIME = ((5) / TICK_1MS) ,

     
    ONE_NET_RESPONSE_TIME_OUT = ((50) / TICK_1MS) ,

     
    ONE_NET_TRN_END_TIME_OUT = ((100) / TICK_1MS) ,

     
     
    ONE_NET_RETRANSMIT_LOW_PRIORITY_TIME = ((10) / TICK_1MS) ,

     
     
    ONE_NET_RETRANSMIT_HIGH_PRIORITY_TIME = ((2) / TICK_1MS) ,

     
    ONE_NET_FRAGMENT_DELAY_LOW_PRIORITY = ((125) / TICK_1MS) ,

     
    ONE_NET_FRAGMENT_DELAY_HIGH_PRIORITY = ((25) / TICK_1MS) ,

     
     
    ONE_NET_STAY_AWAKE_TIME = ((2000) / TICK_1MS)
};

 
 
typedef enum
{

     
    ONE_NET_MIN_US_CHANNEL,                              
    ONE_NET_US_CHANNEL_1 = ONE_NET_MIN_US_CHANNEL,       
    ONE_NET_US_CHANNEL_2,                                
    ONE_NET_US_CHANNEL_3,                                
    ONE_NET_US_CHANNEL_4,                                
    ONE_NET_US_CHANNEL_5,                                
    ONE_NET_US_CHANNEL_6,                                
    ONE_NET_US_CHANNEL_7,                                
    ONE_NET_US_CHANNEL_8,                                
    ONE_NET_US_CHANNEL_9,                                
    ONE_NET_US_CHANNEL_10,                               
    ONE_NET_US_CHANNEL_11,                               
    ONE_NET_US_CHANNEL_12,                               
    ONE_NET_US_CHANNEL_13,                               
    ONE_NET_US_CHANNEL_14,                               
    ONE_NET_US_CHANNEL_15,                               
    ONE_NET_US_CHANNEL_16,                               
    ONE_NET_US_CHANNEL_17,                               
    ONE_NET_US_CHANNEL_18,                               
    ONE_NET_US_CHANNEL_19,                               
    ONE_NET_US_CHANNEL_20,                               
    ONE_NET_US_CHANNEL_21,                               
    ONE_NET_US_CHANNEL_22,                               
    ONE_NET_US_CHANNEL_23,                               
    ONE_NET_US_CHANNEL_24,                               
    ONE_NET_US_CHANNEL_25,                               
    ONE_NET_MAX_US_CHANNEL = ONE_NET_US_CHANNEL_25,      


     
    ONE_NET_MIN_EUR_CHANNEL,                             
    ONE_NET_EUR_CHANNEL_1 = ONE_NET_MIN_EUR_CHANNEL,     
    ONE_NET_EUR_CHANNEL_2,                               
    ONE_NET_EUR_CHANNEL_3,                               
    ONE_NET_MAX_EUR_CHANNEL = ONE_NET_EUR_CHANNEL_3,     

    ONE_NET_NUM_CHANNELS,                                
    ONE_NET_MAX_CHANNEL = ONE_NET_NUM_CHANNELS - 1       
} one_net_channel_t;

 
 
 

 
 
 
 
 
    
 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 



#line 58 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/port_specific/one_net_port_specific.h"


#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 60 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/port_specific/one_net_port_specific.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_status_codes.h"























































































































































#line 61 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/port_specific/one_net_port_specific.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"


















































































































#line 62 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/port_specific/one_net_port_specific.h"


 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 










void * one_net_memmove(void * dst, const void * SRC, size_t len);

 











SInt8 one_net_memcmp(const void *vp1, const void *vp2, size_t n);



 







UInt16 one_net_byte_stream_to_int16(const UInt8 * const BYTE_STREAM);


 







void one_net_int16_to_byte_stream(const UInt16 VAL, UInt8 * const byte_stream);


 







UInt32 one_net_byte_stream_to_int32(const UInt8 * const BYTE_STREAM);


 







void one_net_int32_to_byte_stream(const UInt32 VAL, UInt8 * const byte_stream);


 






tick_t one_net_tick(void);


 






tick_t one_net_ms_to_tick(const UInt32 MS);


 






UInt32 one_net_tick_to_ms(const tick_t TICK);


 







void one_net_set_channel(const UInt8 CHANNEL);


 










BOOL one_net_channel_is_clear(void);


 










void one_net_set_data_rate(const UInt8 DATA_RATE);


 






one_net_status_t one_net_look_for_pkt(const tick_t DURATION);


 









UInt16 one_net_read(UInt8 * data, const UInt16 LEN);


 










UInt16 one_net_write(const UInt8 * DATA, const UInt16 LEN);


 







BOOL one_net_write_done(void);

 
 
 

 


#line 53 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_timer.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_timer.h"


 
 
 

 





























 



























#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 69 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_timer.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_timer_port_const.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_timer_port_const.h"


 
 
 
 

 





























 













 
 
 
 
 

 







enum
{

     
    AUTO_MODE_TIMER = 0,

    
     
    TX_LED_TIMER,
    
     
    RX_LED_TIMER,

     
    PROMPT_TIMER,


     
    USER_INPUT_TIMER,


     
     
    ONT_NUM_APP_TIMERS
};

 
 
 

 
 
 
 
 
    
 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 



#line 70 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_timer.h"


#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/tick.h"





































































































































































































#line 72 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_timer.h"



#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_client.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_client.h"


 
 
 

 





























 











#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_client_port_const.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_client_port_const.h"


 
 
 

 





























 













#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/app/one_net_application.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/app/one_net_application.h"


 
 
 

 





























 







#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 49 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/app/one_net_application.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/common/one_net_types.h"


















































































































#line 50 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/app/one_net_application.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_status_codes.h"























































































































































#line 51 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/app/one_net_application.h"


 
 
 
 
 

 
enum
{
     
     
     
    ONA_MSG_FIRST_IDX      = 0,
    ONA_MSG_SECOND_IDX     = 3,
    ONA_MSG_THIRD_IDX      = 4,

    ONA_MSG_SRC_UNIT_IDX   = ONA_MSG_FIRST_IDX,  
    ONA_MSG_SRC_UNIT_MASK  = 0xf0,   
    ONA_MSG_SRC_UNIT_SHIFT = 4,      

    ONA_MSG_DST_UNIT_IDX   = ONA_MSG_FIRST_IDX,      
    ONA_MSG_DST_UNIT_MASK  = 0x0f,   
    ONA_MSG_DST_UNIT_SHIFT = 0,      

     
    ONA_MSG_HDR_IDX = 1,

     
    ONA_MSG_HDR_LEN = 2,

     
    ONA_MSG_DATA_IDX = ONA_MSG_SECOND_IDX,

     
    ONA_MSG_DATA_LEN = 2,

    ONA_MSG_NUM_BYTES = 3,  

    ONA_SINGLE_PACKET_PAYLOAD_LEN = 5  

};

inline void get_three_message_bytes_from_payload(UInt8 *msg, const UInt8 *payload)
{
    *(msg++) = payload[ONA_MSG_FIRST_IDX];
    *(msg++) = payload[ONA_MSG_SECOND_IDX];
    *msg     = payload[ONA_MSG_THIRD_IDX];
}

inline void put_three_message_bytes_to_payload(const UInt8 *msg, UInt8 *payload)
{
    payload[ONA_MSG_FIRST_IDX]  = *(msg++);
    payload[ONA_MSG_SECOND_IDX] = *(msg++);
    payload[ONA_MSG_THIRD_IDX]  = *msg;
}


inline UInt8 get_first_msg_byte(const UInt8 *payload)
{
    return payload[ONA_MSG_FIRST_IDX];
}

inline void put_first_msg_byte(UInt8 data, UInt8 *payload)
{
    payload[ONA_MSG_FIRST_IDX] = data;
}

inline UInt8 get_second_msg_byte(const UInt8 *payload)
{
    return payload[ONA_MSG_SECOND_IDX];
}

inline void put_second_msg_byte(UInt8 data, UInt8 *payload)
{
    payload[ONA_MSG_SECOND_IDX] = data;
}

inline UInt8 get_third_msg_byte(const UInt8 *payload)
{
    return payload[ONA_MSG_THIRD_IDX];
}

inline void put_third_msg_byte(const UInt8 data, UInt8 *payload)
{
    payload[ONA_MSG_THIRD_IDX] = data;
}


inline UInt16 get_first_two_msg_bytes(const UInt8 *payload)
{
    return (((UInt16)payload[ONA_MSG_FIRST_IDX]<< 8) |
             (UInt16)payload[ONA_MSG_SECOND_IDX]);
}

inline void put_first_two_msg_bytes(UInt16 data, UInt8 *payload)
{
    payload[ONA_MSG_FIRST_IDX]  = data >> 8;
    payload[ONA_MSG_SECOND_IDX] = data;
}

 
inline UInt16 get_msg_hdr(const UInt8 *payload)
{
    return ((UInt16)payload[ONA_MSG_HDR_IDX]<< 8) | 
            (UInt16)payload[ONA_MSG_HDR_IDX+1];
}

inline void put_msg_hdr(UInt16 data, UInt8 *payload)
{
    payload[ONA_MSG_HDR_IDX]   = data >> 8;
    payload[ONA_MSG_HDR_IDX+1] = data;
}


 
inline UInt16 get_msg_data(const UInt8 *payload)
{
    return ((UInt16)payload[ONA_MSG_SECOND_IDX] << 8) |
            (UInt16)payload[ONA_MSG_THIRD_IDX];
}

 


inline void put_msg_data(UInt16 data, UInt8 *payload)
{
    payload[ONA_MSG_SECOND_IDX] = data >> 8;
    payload[ONA_MSG_THIRD_IDX]  = data;
}

 
inline UInt8 get_src_unit(const UInt8 *payload)
{
    return (payload[ONA_MSG_SRC_UNIT_IDX] & ONA_MSG_SRC_UNIT_MASK) >> 
            ONA_MSG_SRC_UNIT_SHIFT;
}

 
inline void put_src_unit(UInt8 data , UInt8 *payload)
{
    payload[ONA_MSG_SRC_UNIT_IDX] = 
        (payload[ONA_MSG_SRC_UNIT_IDX]    & ~ONA_MSG_SRC_UNIT_MASK) |
        ((data << ONA_MSG_SRC_UNIT_SHIFT) &  ONA_MSG_SRC_UNIT_MASK);
}

 
inline UInt8 get_dst_unit(const UInt8 *payload)
{
    return (payload[ONA_MSG_DST_UNIT_IDX] & ONA_MSG_DST_UNIT_MASK) >> 
            ONA_MSG_DST_UNIT_SHIFT;
}

 
inline void put_dst_unit(UInt8 data, UInt8 *payload)
{
    payload[ONA_MSG_DST_UNIT_IDX] = 
        (payload[ONA_MSG_DST_UNIT_IDX]    & ~ONA_MSG_DST_UNIT_MASK) |
        ((data << ONA_MSG_DST_UNIT_SHIFT) &  ONA_MSG_DST_UNIT_MASK);
}

 
 
 

enum
{
     
    ONA_BLK_DATA_HDR_MSG_TYPE_IDX = 0,

     
    ONA_BLK_DATA_HDR_BLK_LEN_IDX = 2,

     
    ONA_BLK_DATA_HDR_SRC_DST_IDX = 4,

     
    ONA_BLK_DATA_HDR_DATA_IDX = 5,

     
    ONA_BLK_DATA_HDR_DATA_LEN = 5,

     
    ONA_BLK_DATA_HDR_SRC_UNIT_MASK = 0xf0,

     
    ONA_BLK_DATA_HDR_DST_UNIT_MASK = 0x0f,

     
    ONA_BLK_DATA_HDR_SRC_UNIT_SHIFT = 4

};

inline void put_block_data_payload_hdr(UInt16 msg_type, UInt16 block_len,
  UInt8 src_unit, UInt8 dst_unit, UInt8 *payload)
{
    payload[ONA_BLK_DATA_HDR_MSG_TYPE_IDX] = msg_type >> 8;
    payload[ONA_BLK_DATA_HDR_MSG_TYPE_IDX+1] = msg_type;

    payload[ONA_BLK_DATA_HDR_BLK_LEN_IDX] = block_len >> 8;
    payload[ONA_BLK_DATA_HDR_BLK_LEN_IDX+1] = block_len;

    payload[ONA_BLK_DATA_HDR_SRC_DST_IDX] = (src_unit << ONA_BLK_DATA_HDR_SRC_UNIT_SHIFT) & 
      ONA_BLK_DATA_HDR_SRC_UNIT_MASK;

    payload[ONA_BLK_DATA_HDR_SRC_DST_IDX] |= dst_unit & ONA_BLK_DATA_HDR_DST_UNIT_MASK;
}  

inline void get_block_data_payload_hdr(UInt16 * msg_type, UInt16 * block_len,
  UInt8 * src_unit, UInt8 * dst_unit, UInt8 *payload)
{
    if (msg_type)
    {
        *msg_type = ((UInt16)payload[ONA_BLK_DATA_HDR_MSG_TYPE_IDX] << 8) | 
                (UInt16)payload[ONA_BLK_DATA_HDR_MSG_TYPE_IDX+1];
    }

    if (block_len)
    {
        *block_len = ((UInt16)payload[ONA_BLK_DATA_HDR_BLK_LEN_IDX] << 8) | 
                (UInt16)payload[ONA_BLK_DATA_HDR_BLK_LEN_IDX+1];
    }

    if (src_unit)
    {
        *src_unit = (payload[ONA_BLK_DATA_HDR_SRC_DST_IDX] & ONA_BLK_DATA_HDR_SRC_UNIT_MASK) >> 
                ONA_BLK_DATA_HDR_SRC_UNIT_SHIFT;
    }

    if (dst_unit)
    {
        *dst_unit = payload[ONA_BLK_DATA_HDR_SRC_DST_IDX] & ONA_BLK_DATA_HDR_DST_UNIT_MASK;
    }
}  




 
 
 

 
 
 
 
 

typedef enum _ona_msg_class
{
    ONA_STATUS   = 0x0000,  
    ONA_COMMAND  = 0x4000,  
    ONA_QUERY    = 0x8000,  
    ONA_NOT_USED = 0xC000,  

    ONA_MSG_CLASS_MASK = 0xC000,     
} ona_msg_class_t;
















typedef enum _ona_msg_type
{

     
    ONA_SWITCH = 0x0000,





































     
    ONA_STATUS_INTERVAL = 0x0008,











     
    ONA_UNUSED0 = 0x000B,

     
    ONA_UNIT_TYPE_COUNT = 0x000C,

     
    ONA_UNIT_TYPE = 0x000D,







     
    ONA_SIMPLE_TEXT = 0x000F,







































































































































































     
    ONA_MSG_TYPE_MASK = 0x3FFF
} ona_msg_type_t;






















































































































































































































































 
typedef enum _ona_block_msg_type
{
     
    ONA_BLOCK_INSTEON_EXTENDED = 0x0000,

     
    ONA_BLOCK_TEXT = 0x0001,
	
	 
    ONA_BLOCK_BINARY = 0x0002
} ona_block_msg_type_t;


typedef enum _ona_unit_type
{

     
    ONA_SIMPLE_SWITCH = 0x0000,


































































} ona_unit_type_t;


 
typedef struct
{
     
    ona_unit_type_t type;

     
    UInt8 count;
} ona_unit_type_count_t;

 
typedef one_net_status_t (*one_net_send_single_func_t)(UInt8 *data,
  UInt8 DATA_LEN, UInt8 DST_UNIT_IDX, UInt8 PRIORITY,
  const one_net_raw_did_t *RAW_DST, UInt8 SRC_UNIT);


     
    typedef one_net_status_t (*one_net_block_stream_request_func_t)(
      UInt8 TYPE, BOOL SEND, UInt16 DATA_TYPE,
      UInt16 LEN, UInt8 PRIORITY,
      const one_net_raw_did_t *DID, UInt8 SRC_UNIT);


 
 
 

 
 
 
 
 

extern one_net_send_single_func_t one_net_send_single;


    extern one_net_block_stream_request_func_t one_net_block_stream_request;


 
 
 

 
 
 
 
 

one_net_status_t ona_parse_msg_class_and_type(const UInt8 *MSG_DATA,
  ona_msg_class_t *msg_class, ona_msg_type_t *msg_type);






one_net_status_t ona_send_unit_type_count_query(
  const one_net_raw_did_t *RAW_DST);






one_net_status_t ona_send_unit_type_query(UInt8 UNIT_TYPE_INDEX, 
  const one_net_raw_did_t *RAW_DST);

one_net_status_t ona_parse_unit_type_count(const UInt8 *MSG_DATA,
  UInt8 * unit_count, UInt8 * unit_type_count);

one_net_status_t ona_parse_unit_type_status(const UInt8 *MSG_DATA,
  ona_unit_type_t * unit_type, UInt8 * unit_count);






 
 
 

 



#line 55 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_client_port_const.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/tick.h"





































































































































































































#line 56 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_client_port_const.h"


 
 
    
enum
{
     
    ONE_NET_RX_FROM_DEVICE_COUNT = 3,

     
	 


     
     
    ONE_NET_MAX_PEER_DEV = 8,
	
     
    ONE_NET_MAX_PEER_UNIT = 16,


     
     
    ONE_NET_NUM_UNIT_TYPES = 1,

     
     
    ONE_NET_NUM_UNITS = 4
};

 
enum
{
     
     
    ONE_NET_SCAN_CHANNEL_TIME = ((1000) / TICK_1MS)
};


    enum
    {
         
        ONE_NET_STREAM_KEY_QUERY_INTERVAL = ((3000) / TICK_1MS)
    };


 
 
 
extern const ona_unit_type_count_t
  ONE_NET_DEVICE_UNIT_TYPE[ONE_NET_NUM_UNIT_TYPES];

 
 

 
 

 
 

 
 

 
 

 
 

 
 

 



#line 53 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_client.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_port_const.h"


































































































































































































#line 54 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_client.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 55 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_client.h"


 
 
 
 
 

enum
{
     
     
     

         
         
        ON_CLIENT_TXN_COUNT = 4,
        
         
        ON_CLIENT_SINGLE_TXN_TIMER_OFFSET = 0,
        
         
        ON_CLIENT_BLOCK_TXN_TIMER_OFFSET,
        
         
        ON_CLIENT_STREAM_TXN_TIMER_OFFSET,
        
         
        ON_CLIENT_RESPONSE_TXN_TIMER_OFFSET





};

 
 
 

 
 
 
 
 

 
typedef struct
{
     
    on_sending_device_t device;

     
    tick_t keep_alive_interval;

    struct
    {
         
        UInt8 master_data_rate;

         
         
        UInt8 flags;
    } settings;
} on_master_t;

 
typedef struct
{
    one_net_channel_t   channel; 
    one_net_xtea_key_t  current_key;
    UInt8               single_block_encrypt_method;
    on_data_rate_t      data_rate;
    one_net_raw_sid_t   raw_sid;
    one_net_raw_did_t   raw_master_did;
    on_data_rate_t      master_data_rate;
    tick_t              keep_alive_interval;

    UInt8               max_hops;


    tick_t              fragment_delay_low;
    tick_t              fragment_delay_high;
    one_net_xtea_key_t  stream_key;
    UInt8               stream_encrypt_method;


} one_net_client_join_network_data_t;


 
 
 

 
 
 
 
 

 





extern BOOL client_joined_network;
extern BOOL client_looking_for_invite;


    extern BOOL client_invite_timed_out;
	extern one_net_channel_t low_invite_channel;
	extern one_net_channel_t high_invite_channel;	



 
 
 

 
 
 
 
 














    one_net_status_t one_net_client_look_for_invite(
      const one_net_xtea_key_t * const INVITE_KEY,
      const UInt8 SINGLE_BLOCK_ENCRYPT_METHOD,
      const UInt8 STREAM_ENCRYPT_METHOD,
	  const one_net_channel_t min_channel,
	  const one_net_channel_t max_channel,
	  const tick_t timeout_time);










one_net_status_t one_net_client_init(const UInt8 * const PARAM,
  const UInt16 PARAM_LEN);

void one_net_copy_to_nv_param(const UInt8 *param, UInt16 len);

void one_net_client_raw_master_did(one_net_raw_did_t * const master_did);

one_net_status_t one_net_client_send_single(UInt8 *data,
  UInt8 data_len, UInt8 dst_unit_idx, UInt8 priority,
  const one_net_raw_did_t *raw_dst, UInt8 src_unit);


    one_net_status_t one_net_client_block_stream_request(const UInt8 TYPE,
      const BOOL SEND, const UInt16 DATA_TYPE, const UInt16 LEN,
      const UInt8 PRIORITY, const one_net_raw_did_t * const DID,
      const UInt8 SRC_UNIT);
    one_net_status_t one_net_client_end_stream(void);
    void one_net_client_stream_key_query(void);

one_net_status_t one_net_client_join_network(one_net_client_join_network_data_t *DATA);

tick_t one_net_client(void);


    UInt8 one_net_client_get_channel(void);



 
 
 

 


#line 75 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_timer.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_master.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_master.h"



 
 
 

 






























 











#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 55 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_master.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_port_const.h"


































































































































































































#line 56 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_master.h"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_master_port_const.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_master_port_const.h"


 
 
 

 





























 













#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/tick.h"





































































































































































































#line 55 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/one_net_master_port_const.h"


 
 
 
 
 

enum
{
     
    ONE_NET_MASTER_MAX_CLIENTS = 5,

     
    ONE_NET_MASTER_INVITE_SEND_TIME = ((250) / TICK_1MS) ,

     
     
    ONE_NET_MASTER_CHANGE_KEY_TIMEOUT = ((10000) / TICK_1MS) ,
    
     
     
    ONE_NET_MASTER_NETWORK_CHANNEL_CLR_TIME = ((5000) / TICK_1MS) ,
    
     
     
     
    ONE_NET_MASTER_CHANNEL_SCAN_TIME = ((10000) / TICK_1MS)
};

 
 


 
 



enum
{
     
    ONE_NET_MASTER_MAX_SEND_TXN = 6,

     
     
    ONE_NET_MASTER_MIN_SINGLE_TXN = 2,

     
     
     
    ONE_NET_MASTER_MAX_TXN = 10,

     
     
    ONE_NET_MASTER_LOW_LOAD_LIMIT = 3 + 1
};

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 
 
 

 



#line 57 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/mac/one_net_master.h"


 
 
 
 
 

enum
{
     
     
     
    ONE_NET_INITIAL_CLIENT_DID = 0x0020,
    
     
     
     
     
    ON_MASTER_TXN_COUNT = ONE_NET_MASTER_MAX_TXN + 1,
    
     
     
    ON_MASTER_RESPONSE_TXN_TIMER_OFFSEST = ONE_NET_MASTER_MAX_TXN
};

 
 
 

 
 
 
 
 

 
 
typedef enum
{
     
    ONE_NET_UPDATE_DATA_RATE = 0x00,

     
    ONE_NET_UPDATE_PEER_DATA_RATE = 0x01,
    
     
    ONE_NET_UPDATE_NETWORK_KEY = 0x02,

     
    ONE_NET_UPDATE_ASSIGN_PEER = 0x03,

     
    ONE_NET_UPDATE_UNASSIGN_PEER = 0x04,

     
    ONE_NET_UPDATE_REPORT_TO_MASTER = 0x05,

     
    ONE_NET_UPDATE_LOW_FRAGMENT_DELAY = 0x06,

     
    ONE_NET_UPDATE_HIGH_FRAGMENT_DELAY = 0x07,

     
    ONE_NET_UPDATE_KEEP_ALIVE = 0x08,

     
    ONE_NET_UPDATE_REMOVE_DEVICE = 0x09,
    
     
    ONE_NET_UPDATE_STREAM_KEY = 0x0A,

     
     
    ONE_NET_UPDATE_NOTHING
} one_net_mac_update_t;

 
 
 
 
 
 
typedef struct
{
    BOOL multi_hop_repeater;                 
    BOOL multi_hop_capable;                  
    BOOL full_featured;                      
    UInt8 max_peers;                         
    on_data_rate_t max_data_rate;            
} one_net_master_add_client_in_t;


 
 
 
 
 
typedef struct
{
    one_net_raw_sid_t raw_sid;               
    one_net_xtea_key_t current_key;          
    one_net_xtea_key_t stream_key;           
    one_net_raw_did_t master_did;            
    tick_t keep_alive_interval;              
    tick_t fragment_delay_low;               
    tick_t fragment_delay_high;              
    UInt8 single_block_encrypt_method;       
    UInt8 stream_encrypt_method;             
    on_data_rate_t master_data_rate;         
    on_data_rate_t data_rate;                
    one_net_channel_t channel;               
    BOOL update_master;                      
} one_net_master_add_client_out_t;


 
typedef struct
{
     
    UInt16 next_client_did;
	
     
    one_net_xtea_key_t old_key;
    
     
    one_net_xtea_key_t old_stream_key;
    
     
    UInt16 client_count;
} on_master_param_t;


 
typedef struct
{
     
    on_encoded_did_t did;

     
    UInt8 expected_nonce;

     
    UInt8 last_nonce;

     
    UInt8 send_nonce;

     
    UInt8 data_rate;

     
    UInt8 max_data_rate;

     
    UInt8 features;

     
     
    UInt8 flags;

     
    BOOL use_current_key;
    
     
    BOOL use_current_stream_key;

     
     
    UInt8 max_hops;
} on_client_t;


 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

one_net_status_t one_net_master_create_network(
  const one_net_raw_sid_t * const SID, const one_net_xtea_key_t * const KEY,
  const UInt8 SINGLE_BLOCK_ENCRYPT_METHOD,
  const one_net_xtea_key_t * const STREAM_KEY,
  const UInt8 STREAM_ENCRYPT_METHOD);
one_net_status_t one_net_master_init(const UInt8 * const PARAM,
  const UInt16 PARAM_LEN);

UInt8 one_net_master_get_channel(void);

one_net_status_t one_net_master_send_single(UInt8 * data,
  UInt8 data_len, UInt8 dst_unit_idx, UInt8 priority,
  const one_net_raw_did_t *raw_dst, UInt8 src_unit);

one_net_status_t one_net_master_block_stream_request(UInt8 TYPE,
  BOOL SEND, UInt16 DATA_TYPE, UInt16 LEN, UInt8 PRIORITY,
  const one_net_raw_did_t * DID, UInt8 SRC_UNIT);

one_net_status_t one_net_master_end_stream(const one_net_raw_did_t * const DID);

one_net_status_t one_net_master_change_client_data_rate(
  const one_net_raw_did_t * const RAW_DID, const UInt8 DATA_RATE);
one_net_status_t one_net_master_change_client_keep_alive(
  const one_net_raw_did_t * const RAW_DST, const UInt32 KEEP_ALIVE);
one_net_status_t one_net_master_change_frag_dly(
  const one_net_raw_did_t * const RAW_DST, const UInt8 PRIORITY,
  const UInt32 DELAY);
one_net_status_t one_net_master_change_key(
  const one_net_xtea_key_fragment_t KEY_FRAGMENT);
one_net_status_t one_net_master_change_stream_key(
  const one_net_xtea_key_t * const NEW_STREAM_KEY);

one_net_status_t one_net_master_peer_assignment(const BOOL ASSIGN,
  const one_net_raw_did_t * const SRC_DID, const UInt8 SRC_UNIT,
  const one_net_raw_did_t * const PEER_DID, const UInt8 PEER_UNIT);

one_net_status_t one_net_master_set_update_master_flag(const BOOL UPDATE_MASTER,
  const one_net_raw_did_t * const DST_DID);







one_net_status_t one_net_master_start_data_rate_test(
  const one_net_raw_did_t * const SENDER,
  const one_net_raw_did_t * const RECEIVER, const UInt8 DATA_RATE);

one_net_status_t one_net_master_invite(const one_net_xtea_key_t * const KEY);
one_net_status_t one_net_master_cancel_invite(
  const one_net_xtea_key_t * const KEY);

one_net_status_t one_net_master_remove_device(
  const one_net_raw_did_t * const RAW_PEER_DID);

void one_net_master(void);

one_net_status_t one_net_master_add_client(
  const one_net_master_add_client_in_t * CAPABILITIES,
  one_net_master_add_client_out_t * config);
  
 
one_net_status_t one_net_master_delete_last_client(one_net_raw_did_t * raw_client_did);

 
 
 
 


 
 
 

 


#line 76 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_timer.h"







 
 
 
 
 

enum
{
     

         
         
         
         
        ONT_TXN_TIMER_COUNT = ON_MASTER_TXN_COUNT > ON_CLIENT_TXN_COUNT
          ? ON_MASTER_TXN_COUNT : ON_CLIENT_TXN_COUNT





};


 
enum
{
     
    ONT_GENERAL_TIMER = ONT_NUM_APP_TIMERS,

     



	

         
         
        ONT_INVITE_TIMER,



         
         
         
        ONT_CHANGE_KEY_TIMER,
		
         
         
        ONT_CHANGE_STREAM_KEY_TIMER,
        
         
        ONT_DATA_RATE_TEST_TIMER,
        
         
         
         

             
            ONT_M_TXN_START,


    

         
         
         

             
            ONT_KEEP_ALIVE_TIMER = ONT_INVITE_TIMER,




         
         
        ONT_STAY_AWAKE_TIMER,


             
            ONT_STREAM_KEY_TIMER,

        
         
         
         

             
            ONT_C_TXN_START,










   

        ONT_FIRST_TXN_TIMER = ONT_M_TXN_START > ONT_C_TXN_START
          ? ONT_M_TXN_START : ONT_C_TXN_START,




     
    ONT_NUM_TIMERS = ONT_FIRST_TXN_TIMER + ONT_TXN_TIMER_COUNT
};

 
 
 

 
 
 
 
 
    
 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

BOOL ont_set_timer(const UInt8 TIMER, const tick_t DURATION);
tick_t ont_get_timer(const UInt8 TIMER);
BOOL ont_stop_timer(const UInt8 TIMER);

BOOL ont_active(const UInt8 TIMER);
BOOL ont_expired(const UInt8 TIMER);
BOOL ont_inactive_or_expired(const UInt8 TIMER);

 
 
 

 



#line 54 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_prand.h"




#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../src/eval/adi/config_options.h"


































































































































































































































































































































































































































































































































































































































































































































































#line 5 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_prand.h"


 
 

 





























 












 
 
 
 
 

 
 
 

 
 

 
 
 

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

UInt32 one_net_prand(const UInt32 MODIFIER, const UInt32 MAX_RAND);

 
 
 

 



#line 55 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"

#line 1 "D:/One-Net/Source/trunk/processors/renesas/hew/one_net_eval/../../../../one_net/utility/one_net_xtea.h"
















































































































#line 56 "D:/One-Net/Source/trunk/one_net/mac/one_net.c"






















 
 
 
 
 





 
static const UInt8 PREAMBLE[] = {0x55, 0x55, 0x55};

 
static const UInt8 SOF[] = {0x33};

enum
{
    ON_XTEA_8_ROUNDS = 8,            
    ON_XTEA_32_ROUNDS = 32           
};


const on_encoded_did_t ON_ENCODED_BROADCAST_DID = {0xB4, 0xB4};






 
const one_net_raw_did_t ON_RAW_BROADCAST_DID = {0x00, 0x00};

 
 
 

 
 
 
 
 

 
 
 

 
 
 
 
 

 

    static on_pkt_hdlr_set_t pkt_hdlr = {0, 0, 0, 0, 0, 0, 0};




 
on_state_t on_state = ON_INIT_STATE;

 
on_base_param_t * on_base_param = 0;

 
static UInt8 data_rate_result;


     
    static BOOL block_complete = FALSE;

     
     
     
     
    static on_txn_t * cur_stream = 0;
















 
 
 

 
 
 
 
 

static BOOL check_for_clr_channel(void);

 





    static one_net_status_t rx_pkt_addr(
      const on_encoded_did_t * const EXPECTED_SRC_DID,
      on_encoded_did_t * const SRC_DID);

static one_net_status_t rx_single_resp_pkt(on_txn_t ** txn);
static one_net_status_t rx_single_txn_ack(on_txn_t ** txn);

    static one_net_status_t rx_block_resp_pkt(on_txn_t ** txn);
    static one_net_status_t rx_block_txn_ack(on_txn_t ** txn);
    static one_net_status_t rx_stream_resp_pkt(on_txn_t ** txn);


    static one_net_status_t rx_data_rate(on_txn_t * const txn,
      const BOOL RECEIVER, UInt8 * const hops);




static one_net_status_t rx_single_data(const UInt8 PID,
  const on_encoded_did_t * const SRC_DID, on_txn_t ** txn);

    static one_net_status_t rx_block_data(const UInt8 PID,
      const on_encoded_did_t * const SRC_DID, on_txn_t ** txn);
    static one_net_status_t rx_stream_data(const UInt8 PID,
      const on_encoded_did_t * const SRC_DID, on_txn_t ** txn);

static one_net_status_t rx_payload(UInt8 * const raw_pld,
  const UInt8 ENCODED_LEN);
static one_net_status_t rx_nonces(UInt8 * const txn_nonce,
  UInt8 * const next_nonce);





 
 
 

 
 
 
 
 

 







void one_net_init(const on_pkt_hdlr_set_t * const PKT_HDLR)
{
    one_net_set_channel(on_base_param->channel);

    one_net_memmove(&pkt_hdlr, PKT_HDLR, sizeof(pkt_hdlr));
}  


 







BOOL on_is_my_NID(const on_encoded_nid_t * const NID)
{
    UInt16 i;

    if(!NID)
    {
        return FALSE;
    }  

    for(i = 0; i < ON_ENCODED_NID_LEN; i++)
    {
        if((*NID)[i] != on_base_param->sid[i])
        {
            return FALSE;
        }  
    }  

    return TRUE;
}  


 








BOOL on_encoded_did_equal(const on_encoded_did_t * const LHS,
  const on_encoded_did_t * const RHS)
{
    UInt8 i;

    if(!LHS || !RHS)
    {
        return FALSE;
    }  

    for(i = 0; i < ON_ENCODED_DID_LEN; i++)
    {
        if((*LHS)[i] != (*RHS)[i])
        {
            return FALSE;
        }  
    }  

    return TRUE;
}  


 








one_net_status_t on_validate_dst_DID(const on_encoded_did_t * const DID)
{
    if(on_encoded_did_equal(DID, (const on_encoded_did_t * const)
      &(on_base_param->sid[ON_ENCODED_NID_LEN])))
    {
        return ONS_SUCCESS;
    }  

    if(on_encoded_did_equal(DID, &ON_ENCODED_BROADCAST_DID))
    {
        return ONS_BROADCAST_ADDR;
    }  

    return ONS_DID_FAILED;
}  


 














one_net_status_t on_encrypt(const UInt8 DATA_TYPE, UInt8 * const data,
  const one_net_xtea_key_t * const KEY)
{
     
    UInt8 payload_len;

     
    UInt8 rounds = 0;

    if(!data || !KEY)
    {
        return ONS_BAD_PARAM;
    }  

     
    if(DATA_TYPE == ON_SINGLE)
    {
        payload_len = ON_RAW_SINGLE_PLD_SIZE;
    }  
    else if(DATA_TYPE == ON_INVITE)
    {
        payload_len = ON_RAW_INVITE_SIZE;
    }  

        else
        {
            payload_len = ON_RAW_BLOCK_STREAM_PLD_SIZE;
        }  







     
    if(DATA_TYPE != ON_STREAM)
    {
        switch(on_base_param->single_block_encrypt)
        {
            case ONE_NET_SINGLE_BLOCK_ENCRYPT_NONE:
            {
                rounds = 0;
                break;
            }  

            case ONE_NET_SINGLE_BLOCK_ENCRYPT_XTEA32:
            {
                rounds = ON_XTEA_32_ROUNDS;
                break;
            }  

            default:
            {
                return ONS_INTERNAL_ERR;
                break;
            }  
        }  

        data[payload_len - 1] = on_base_param->single_block_encrypt;
    }  

        else
        {
            switch(on_base_param->stream_encrypt)
            {
                case ONE_NET_STREAM_ENCRYPT_NONE:
                {
                    rounds = 0;
                    break;
                }  

                case ONE_NET_STREAM_ENCRYPT_XTEA8:
                {
                    rounds = ON_XTEA_8_ROUNDS;
                    break;
                }  

                default:
                {
                    return ONS_INTERNAL_ERR;
                    break;
                }  
            }  

            data[payload_len - 1] = on_base_param->stream_encrypt;
        }  



    if(rounds)
    {
        UInt8 i;

         
         
        for(i = 0; i < payload_len - 1; i += ONE_NET_XTEA_BLOCK_SIZE)
        {
            one_net_xtea_encipher(rounds, &(data[i]), KEY);
        }  
    }  


    return ONS_SUCCESS;
}  


 













one_net_status_t on_decrypt(const UInt8 DATA_TYPE, UInt8 * const data,
  const one_net_xtea_key_t * const KEY)
{
     
    UInt8 payload_len;

     
    UInt8 rounds = 0;

    if(!data)
    {
        return ONS_BAD_PARAM;
    }  

     
    if(DATA_TYPE == ON_SINGLE)
    {
        payload_len = ON_RAW_SINGLE_PLD_SIZE;
    }  
    else if(DATA_TYPE == ON_INVITE)
    {
        payload_len = ON_RAW_INVITE_SIZE;
    }  

        else
        {
            payload_len = ON_RAW_BLOCK_STREAM_PLD_SIZE;
        }  







     
    if(DATA_TYPE != ON_STREAM)
    {
        switch(data[payload_len - 1])
        {
            case ONE_NET_SINGLE_BLOCK_ENCRYPT_NONE:
            {
                rounds = 0;
                break;
            }  

            case ONE_NET_SINGLE_BLOCK_ENCRYPT_XTEA32:
            {
                rounds = ON_XTEA_32_ROUNDS;
                break;
            }  

            default:
            {
                return ONS_INTERNAL_ERR;
                break;
            }  
        }  
    }  

        else
        {
            switch(data[payload_len - 1])
            {
                case ONE_NET_STREAM_ENCRYPT_NONE:
                {
                    rounds = 0;
                    break;
                }  

                case ONE_NET_STREAM_ENCRYPT_XTEA8:
                {
                    rounds = ON_XTEA_8_ROUNDS;
                    break;
                }  

                default:
                {
                    return ONS_INTERNAL_ERR;
                    break;
                }  
            }  
        }  



    if(rounds)
    {
        UInt8 i;

         
         
        for(i = 0; i < payload_len - 1; i += ONE_NET_XTEA_BLOCK_SIZE)
        {
            one_net_xtea_decipher(rounds, &(data[i]), KEY);
        }  
    }  


    return ONS_SUCCESS;
}  


 



















one_net_status_t on_rx_data_pkt(const on_encoded_did_t * const EXPECTED_SRC_DID,
  on_txn_t ** txn)
{
    one_net_status_t status;
    on_encoded_did_t src_did;
    UInt8 pid;

     
    if(!pkt_hdlr.single_data_hdlr)
    {
        return ONS_NOT_INIT;
    }  

    if(!EXPECTED_SRC_DID || !txn)
    {
        return ONS_BAD_PARAM;
    }  













        if((status = rx_pkt_addr(EXPECTED_SRC_DID, &src_did)) != ONS_SUCCESS)
        {
            return status;
        }  


     
    if(one_net_read(&pid, sizeof(pid)) != sizeof(pid))
    {
        return ONS_READ_ERR;
    }  

    switch(pid)
    {

            case ONE_NET_ENCODED_MH_SINGLE_DATA:         
            case ONE_NET_ENCODED_MH_REPEAT_SINGLE_DATA:  

        case ONE_NET_ENCODED_SINGLE_DATA:                
        case ONE_NET_ENCODED_REPEAT_SINGLE_DATA:
        {
            status = rx_single_data(pid,
              (const on_encoded_did_t * const)&src_did, txn);
            break;
        }  



                case ONE_NET_ENCODED_MH_BLOCK_DATA:      
                case ONE_NET_ENCODED_MH_REPEAT_BLOCK_DATA:

            case ONE_NET_ENCODED_BLOCK_DATA:             
            case ONE_NET_ENCODED_REPEAT_BLOCK_DATA:
            {
                status = rx_block_data(pid,
                  (const on_encoded_did_t * const)&src_did, txn);
                break;
            }  


                case ONE_NET_ENCODED_MH_STREAM_DATA:     

            case ONE_NET_ENCODED_STREAM_DATA:
            {
                status = rx_stream_data(pid,
                  (const on_encoded_did_t * const)&src_did, txn);
                break;
            }  


        default:
        {
            return ONS_BAD_PKT_TYPE;
        }  
    }  

    return status;
}  


 























    one_net_status_t on_build_admin_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 MSG_TYPE, const UInt8 MSG_ID,
      const on_encoded_did_t * const ENCODED_DST,
      const UInt8 TXN_NONCE, const UInt8 RESP_NONCE,
      const UInt8 * const RAW_DATA, const UInt8 DATA_LEN,
      const one_net_xtea_key_t * const KEY, const UInt8 MAX_HOPS)








{
    UInt8 admin_pkt[ONE_NET_RAW_SINGLE_DATA_LEN];


        if(!pkt || !pkt_size
          || *pkt_size < ON_ENCODED_SINGLE_DATA_LEN + ON_ENCODED_HOPS_SIZE
          || (MSG_TYPE != ON_ADMIN_MSG && MSG_TYPE != ON_EXTENDED_ADMIN_MSG)
          || !ENCODED_DST || !RAW_DATA || DATA_LEN > ON_MAX_ADMIN_PLD_LEN
          || !KEY || MAX_HOPS > ON_MAX_HOPS_LIMIT)







    {
        return ONS_BAD_PARAM;
    }  

    admin_pkt[ON_ADMIN_MSG_ID_IDX] = MSG_ID;
    one_net_memmove(&(admin_pkt[ON_ADMIN_DATA_IDX]), RAW_DATA, DATA_LEN);


        return on_build_data_pkt(pkt, pkt_size, MSG_TYPE,
          MAX_HOPS ? ONE_NET_ENCODED_MH_SINGLE_DATA
          : ONE_NET_ENCODED_SINGLE_DATA, ENCODED_DST, TXN_NONCE, RESP_NONCE,
          admin_pkt, sizeof(admin_pkt), KEY, MAX_HOPS);





}  


 























    one_net_status_t on_build_data_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 MSG_TYPE, const UInt8 PID,
      const on_encoded_did_t * const ENCODED_DST, const UInt8 TXN_NONCE,
      const UInt8 RESP_NONCE, const UInt8 * const RAW_DATA,
      const UInt8 DATA_LEN, const one_net_xtea_key_t * const KEY,
      const UInt8 MAX_HOPS)







{
    one_net_status_t status;

     
    UInt8 raw_pld[ON_MAX_RAW_PLD_LEN + 1];
    UInt8 data_type;                 
    UInt8 pld_word_size;             
    UInt8 raw_pld_len = 0;           


        if(!pkt || !pkt_size || !ENCODED_DST || !RAW_DATA || !DATA_LEN || !KEY
          || MAX_HOPS > ON_MAX_HOPS_LIMIT)



    {
        return ONS_BAD_PARAM;
    }  

    switch(PID)
    {

            case ONE_NET_ENCODED_MH_SINGLE_DATA:         
            case ONE_NET_ENCODED_MH_REPEAT_SINGLE_DATA:  

        case ONE_NET_ENCODED_SINGLE_DATA:                
        case ONE_NET_ENCODED_REPEAT_SINGLE_DATA:
        {

                if(*pkt_size < ON_ENCODED_SINGLE_DATA_LEN + ON_ENCODED_HOPS_SIZE
                  || DATA_LEN > ONE_NET_RAW_SINGLE_DATA_LEN)




            {
                return ONS_BAD_PARAM;
            }  

            data_type = ON_SINGLE;
            raw_pld_len = ONE_NET_RAW_SINGLE_DATA_LEN;
            pld_word_size = ON_ENCODED_SINGLE_PLD_SIZE;
            break;
        }  



                case ONE_NET_ENCODED_MH_BLOCK_DATA:      
                case ONE_NET_ENCODED_MH_REPEAT_BLOCK_DATA:
                case ONE_NET_ENCODED_MH_STREAM_DATA:     

            case ONE_NET_ENCODED_BLOCK_DATA:             
            case ONE_NET_ENCODED_REPEAT_BLOCK_DATA:      
            case ONE_NET_ENCODED_STREAM_DATA:
            {
                if(*pkt_size < ONE_NET_MAX_ENCODED_PKT_LEN
                  || DATA_LEN > ONE_NET_RAW_BLOCK_STREAM_DATA_LEN)
                {
                    return ONS_BAD_PARAM;
                }  


                    if(PID == ONE_NET_ENCODED_STREAM_DATA
                      || PID == ONE_NET_ENCODED_MH_STREAM_DATA)



                {
                    data_type = ON_STREAM;
                }  
                else
                {
                    data_type = ON_BLOCK;
                }  
                raw_pld_len = ONE_NET_RAW_BLOCK_STREAM_DATA_LEN;
                pld_word_size = ON_ENCODED_BLOCK_STREAM_PLD_SIZE;
                break;
            }  


        default:
        {
            return ONS_BAD_PARAM;
            break;
        }  
    }  

     
    raw_pld[ON_PLD_TXN_NONCE_IDX] = (TXN_NONCE << ON_TXN_NONCE_SHIFT)
      & ON_TXN_NONCE_BUILD_MASK;
    raw_pld[ON_PLD_RESP_NONCE_HIGH_IDX] |= (RESP_NONCE
      >> ON_RESP_NONCE_HIGH_SHIFT) & ON_RESP_NONCE_BUILD_HIGH_MASK;
    raw_pld[ON_PLD_RESP_NONCE_LOW_IDX] = (RESP_NONCE << ON_RESP_NONCE_LOW_SHIFT)
      & ON_RESP_NONCE_BUILD_LOW_MASK;
    raw_pld[ON_PLD_MSG_TYPE_IDX] |= MSG_TYPE;
    one_net_memmove(&(raw_pld[ON_PLD_DATA_IDX]), RAW_DATA, DATA_LEN);

     
    raw_pld[0] = (UInt8)one_net_compute_crc(&(raw_pld[ON_PLD_TXN_NONCE_IDX]),
      raw_pld_len + ON_RAW_PLD_HDR_SIZE - ON_PLD_CRC_SIZE, ON_PLD_INIT_CRC,
      ON_PLD_CRC_ORDER);

    if((status = on_encrypt(data_type, raw_pld, KEY)) == ONS_SUCCESS)
    {

            status = on_build_pkt(pkt, pkt_size, PID, ENCODED_DST, raw_pld,
              pld_word_size, MAX_HOPS);




    }  

    return status;
}  


 



















    one_net_status_t on_build_response_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 PID, const on_encoded_did_t * const ENCODED_DST,
      const UInt8 TXN_NONCE, const UInt8 EXPECTED_NONCE, const UInt8 MAX_HOPS)





{
    UInt8 data[ON_RESP_NONCE_LEN];


            if(!pkt || !pkt_size || *pkt_size < ON_ACK_NACK_LEN
              + ON_ENCODED_HOPS_SIZE || TXN_NONCE > ON_MAX_NONCE
              || EXPECTED_NONCE > ON_MAX_NONCE || MAX_HOPS > ON_MAX_HOPS_LIMIT)




    {
        return ONS_BAD_PARAM;
    }  

     
    data[ON_RESP_TXN_NONCE_IDX] = (TXN_NONCE << ON_TXN_NONCE_SHIFT)
      & ON_TXN_NONCE_BUILD_MASK;
    data[ON_RESP_RESP_NONCE_HIGH_IDX] |=
      (EXPECTED_NONCE >> ON_RESP_NONCE_HIGH_SHIFT)
      & ON_RESP_NONCE_BUILD_HIGH_MASK;
    data[ON_RESP_RESP_NONCE_LOW_IDX] =
      (EXPECTED_NONCE << ON_RESP_NONCE_LOW_SHIFT)
      & ON_RESP_NONCE_BUILD_LOW_MASK;



            return on_build_pkt(pkt, pkt_size, PID, ENCODED_DST, data,
              ON_RESP_NONCE_WORD_SIZE, MAX_HOPS);




}  


 





















    one_net_status_t on_build_data_rate_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const on_encoded_did_t * const ENCODED_DST, UInt8 data_rate,
      const UInt8 MAX_HOPS)




{
    one_net_status_t status;
    UInt8 i;


        UInt8 hops = 0;

        if(!pkt || !pkt_size
          || *pkt_size < ON_DATA_RATE_PKT_LEN + ON_ENCODED_HOPS_SIZE
          || !ENCODED_DST || MAX_HOPS > ON_MAX_HOPS_LIMIT)




    {
        return ONS_BAD_PARAM;
    }  

    data_rate <<= ON_DATA_RATE_SHIFT;


        if((status = on_build_pkt(pkt, pkt_size,
          MAX_HOPS ? ONE_NET_ENCODED_MH_DATA_RATE_TEST
          : ONE_NET_ENCODED_DATA_RATE_TEST, ENCODED_DST, &data_rate,
          sizeof(data_rate), MAX_HOPS)) != ONS_SUCCESS)




    {
        return status;
    }  


         
         
         
         
         
        if(MAX_HOPS)
        {
            hops = pkt[*pkt_size - 1];
            (*pkt_size)--;
        }  


     
    for(i = 0; i < ON_TEST_PATTERN_SIZE; i++)
    {
        pkt[(*pkt_size)++] = ON_TEST_PATTERN;
    }  


        if(MAX_HOPS)
        {
             
             
             
            pkt[(*pkt_size)++] = hops;
        }  


    return ONS_SUCCESS;
}  


 























    one_net_status_t on_build_pkt(UInt8 * pkt, UInt8 * const pkt_size,
      const UInt8 PID, const on_encoded_did_t * const ENCODED_DST,
      const UInt8 * const RAW_DATA, const UInt8 DATA_WORD_SIZE,
      const UInt8 MAX_HOPS)





{
    enum
    {
         
        HDR_SIZE = 15
    };

    one_net_status_t rv = ONS_SUCCESS;


        if(!pkt || !pkt_size || !ENCODED_DST
          || *pkt_size < HDR_SIZE + DATA_WORD_SIZE + ON_ENCODED_HOPS_SIZE
          || MAX_HOPS > ON_MAX_HOPS_LIMIT)




    {
        return ONS_BAD_PARAM;
    }  

     
    one_net_memmove(pkt, PREAMBLE, sizeof(PREAMBLE));
    pkt += sizeof(PREAMBLE);

     
    one_net_memmove(pkt, SOF, sizeof(SOF));
    pkt += sizeof(SOF);

     
    one_net_memmove(pkt, *ENCODED_DST, ON_ENCODED_DID_LEN);
    pkt += ON_ENCODED_DID_LEN;

     
    one_net_memmove(pkt, on_base_param->sid, sizeof(on_base_param->sid));
    pkt += sizeof(on_base_param->sid);

     
    *pkt++ = PID;

    if(RAW_DATA)
    {
        rv = on_encode(pkt, RAW_DATA, DATA_WORD_SIZE);








    }  

    *pkt_size = HDR_SIZE + DATA_WORD_SIZE;


        pkt += DATA_WORD_SIZE;
        if(MAX_HOPS)
        {
            rv = on_build_hops(pkt, MAX_HOPS, MAX_HOPS);
            pkt++;
            (*pkt_size)++;
        }  


    return rv;
}  
 


     









    one_net_status_t on_build_hops(UInt8 * const hops, const UInt8 MAX_HOPS,
      const UInt8 HOPS_LEFT)
    {
        UInt8 raw_hops;

        if(!hops || MAX_HOPS > ON_MAX_HOPS_LIMIT || HOPS_LEFT > MAX_HOPS)
        {
            return ONS_BAD_PARAM;
        }  

        raw_hops = ((MAX_HOPS << ON_MAX_HOPS_SHIFT) & ON_MAX_HOPS_BUILD_MASK)
          | ((HOPS_LEFT << ON_HOPS_LEFT_SHIFT) & ON_HOPS_LEFT_BUILD_MASK);

        on_encode(hops, &raw_hops, ON_ENCODED_HOPS_SIZE);

        return ONS_SUCCESS;
    }  



 

















one_net_status_t on_parse_pld(UInt8 * const txn_nonce, UInt8 * const resp_nonce,
  UInt8 * const msg_type, UInt8 * const pld, const UInt8 DATA_TYPE,
  const one_net_xtea_key_t * const KEY)
{
    one_net_status_t status;

    UInt8 raw_pld_len;

    if(!txn_nonce || !resp_nonce || !msg_type || !pld || !KEY)
    {
        return ONS_BAD_PARAM;
    }  

    switch(DATA_TYPE)
    {
        case ON_SINGLE:
        {
             
            raw_pld_len = ON_RAW_SINGLE_PLD_SIZE - 1;
            break;
        }  


            case ON_BLOCK:           
            case ON_STREAM:
            {
                 
                raw_pld_len = ON_RAW_BLOCK_STREAM_PLD_SIZE - 1;
                break;
            }  


        default:
        {
            return ONS_BAD_PARAM;
            break;
        }  
    }  

    if((status = on_decrypt(DATA_TYPE, pld, KEY)) != ONS_SUCCESS)
    {
        return status;
    }  

    if((UInt8)one_net_compute_crc(&(pld[ON_PLD_CRC_SIZE]),
      raw_pld_len - ON_PLD_CRC_SIZE, ON_PLD_INIT_CRC, ON_PLD_CRC_ORDER)
      != pld[ON_PLD_CRC_IDX])
    {
        return ONS_CRC_FAIL;
    }  

     
    *txn_nonce = (pld[ON_PLD_TXN_NONCE_IDX] >> ON_TXN_NONCE_SHIFT)
      & ON_TXN_NONCE_PARSE_MASK;

     
    *resp_nonce = (pld[ON_PLD_RESP_NONCE_HIGH_IDX]
      << ON_RESP_NONCE_HIGH_SHIFT) & ON_RESP_NONCE_PARSE_HIGH_MASK;
    *resp_nonce |= (pld[ON_PLD_RESP_NONCE_LOW_IDX] >> ON_RESP_NONCE_LOW_SHIFT)
      & ON_RESP_NONCE_PARSE_LOW_MASK;

     
    *msg_type = pld[ON_PLD_MSG_TYPE_IDX] & ON_PLD_MSG_TYPE_MASK;

    return ONS_SUCCESS;
}  



     















    one_net_status_t on_read_and_parse_hops(UInt8 * const max_hops,
      UInt8 * const hops_left)
    {
        one_net_status_t status;
        UInt8 hops;

        if(!max_hops || !hops_left)
        {
            return ONS_BAD_PARAM;
        }  

        if(one_net_read(&hops, sizeof(hops)) != sizeof(hops))
        {
            return ONS_READ_ERR;
        }  

        if((status = on_decode(max_hops, &hops, ON_ENCODED_HOPS_SIZE))
          != ONS_SUCCESS)
        {
            return status;
        }  

        *hops_left = ((*max_hops >> ON_HOPS_LEFT_SHIFT)
          & ON_HOPS_LEFT_PARSE_MASK);
        *max_hops = ((*max_hops >> ON_MAX_HOPS_SHIFT) & ON_MAX_HOPS_PARSE_MASK);

        if(*max_hops > ON_MAX_HOPS_LIMIT || *hops_left > *max_hops)
        {
            return ONS_INVALID_DATA;
        }  

        return ONS_SUCCESS;
    }  


     








    UInt8 on_hops_taken(void)
    {
        UInt8 status;
        UInt8 max_hops, hops_left;

        if((status = on_read_and_parse_hops(&max_hops, &hops_left))
          != ONS_SUCCESS)
        {
            return ON_INVALID_HOPS;
        }  

        return max_hops - hops_left;
    }  




     






    void on_update_next_txn_time(on_txn_t * const txn)
    {
        if(!txn)
        {
            return;
        }  

        if(txn->priority == ONE_NET_HIGH_PRIORITY)
        {
            ont_set_timer(txn->next_txn_timer,
              on_base_param->fragment_delay_high);
        }  
        else
        {
            ont_set_timer(txn->next_txn_timer,
              on_base_param->fragment_delay_low);
        }  
    }  



 













BOOL one_net(on_txn_t ** txn)
{
    BOOL rv = FALSE;












     
    if(!txn || !(*txn) || !(*txn)->pkt
      || (*txn)->pkt_size < ON_MIN_ENCODED_PKT_SIZE
      || !pkt_hdlr.single_data_hdlr)
    {
        return FALSE;
    }  

    switch(on_state)
    {
        case ON_SEND_PKT:
        {
            if(check_for_clr_channel())
            {
                one_net_write((*txn)->pkt, (*txn)->data_len);
                on_state = ON_SEND_PKT_WRITE_WAIT;
            }  
            break;
        }  

        case ON_SEND_PKT_WRITE_WAIT:
        {
            if(one_net_write_done())
            {
                rv = TRUE;
                on_state = ON_LISTEN_FOR_DATA;
            }  
            break;
        }  

        case ON_SEND_SINGLE_DATA_PKT:                    

            case ON_SEND_BLOCK_DATA_PKT:                 
            case ON_SEND_STREAM_DATA_PKT:

        {
            if(ont_inactive_or_expired(ONT_GENERAL_TIMER)
              && check_for_clr_channel())
            {
                one_net_write((*txn)->pkt, (*txn)->data_len);
                 

                    ont_set_timer(ONT_GENERAL_TIMER, ((*txn)->max_hops + 1)
                      * ONE_NET_RESPONSE_TIME_OUT);



                on_state++;
            }  
            break;
        }  

        case ON_SEND_SINGLE_DATA_WRITE_WAIT:             
        case ON_SEND_SINGLE_DATA_RESP_WRITE_WAIT:        

            case ON_SEND_BLOCK_DATA_WRITE_WAIT:          
            case ON_SEND_STREAM_DATA_WRITE_WAIT:         

        case ON_SEND_DATA_RATE_WRITE_WAIT:
        {
            if(one_net_write_done())
            {

                    if(cur_stream)
                    {
                        *txn = cur_stream;
                        cur_stream = 0;
                        on_state = ON_WAIT_FOR_STREAM_DATA_RESP;
                    }  
                    else

                {
                    on_state++;
                }  
            }  
            break;
        }  

        case ON_WAIT_FOR_SINGLE_DATA_RESP:
        {
             
             
             
            if(rx_single_resp_pkt(txn) == ONS_SINGLE_FAIL)
            {
                rv = TRUE;
                break;
            }  

            if(on_state == ON_LISTEN_FOR_DATA)
            {
                rv = TRUE;
            }  
            else if(on_state == ON_WAIT_FOR_SINGLE_DATA_RESP
              && ont_inactive_or_expired(ONT_GENERAL_TIMER))
            {
                 
                 
                (*txn)->retry++;

                if((*txn)->retry >= ON_MAX_RETRY)
                {

                        pkt_hdlr.single_txn_hdlr(txn, ON_MAX_NONCE + 1,
                          ONS_SINGLE_FAIL, 0);




                    rv = TRUE;
                    on_state = ON_LISTEN_FOR_DATA;
                }  
                else
                {

                        if((*txn)->pkt[ONE_NET_ENCODED_PID_IDX]
                          == ONE_NET_ENCODED_SINGLE_DATA)
                        {
                            (*txn)->pkt[ONE_NET_ENCODED_PID_IDX]
                              = ONE_NET_ENCODED_REPEAT_SINGLE_DATA;
                        }  
                        else if((*txn)->pkt[ONE_NET_ENCODED_PID_IDX]
                          == ONE_NET_ENCODED_MH_SINGLE_DATA)
                        {
                            (*txn)->pkt[ONE_NET_ENCODED_PID_IDX]
                              = ONE_NET_ENCODED_MH_REPEAT_SINGLE_DATA;
                        }  
                         






                    if((*txn)->priority == ONE_NET_HIGH_PRIORITY)
                    {
                        ont_set_timer(ONT_GENERAL_TIMER,
                          one_net_prand(one_net_tick(),
                          ONE_NET_RETRANSMIT_HIGH_PRIORITY_TIME));
                    }  
                    else
                    {
                        ont_set_timer(ONT_GENERAL_TIMER,
                          one_net_prand(one_net_tick(),
                          ONE_NET_RETRANSMIT_LOW_PRIORITY_TIME));
                    }  
                    on_state = ON_SEND_SINGLE_DATA_PKT;
                }
            }  
            break;
        }  

        case ON_SEND_SINGLE_DATA_RESP:                   

            case ON_SEND_BLOCK_DATA_RESP:                
            case ON_SEND_STREAM_DATA_RESP:

        {
            if(check_for_clr_channel())
            {
                one_net_write((*txn)->pkt, (*txn)->data_len);


                     
                    if(!cur_stream)

                {
                     

                     
                     
                     
                     
                    

                        ont_set_timer(ONT_GENERAL_TIMER, ((*txn)->max_hops + 1)
                          * ONE_NET_TRN_END_TIME_OUT);




                }  

                on_state++;
            }  
            break;
        }  

        case ON_WAIT_FOR_SINGLE_DATA_END:
        {
            rx_single_txn_ack(txn);

             
             
            if(on_state == ON_WAIT_FOR_SINGLE_DATA_END
              && ont_inactive_or_expired(ONT_GENERAL_TIMER))
            {
                rv = TRUE;
                on_state = ON_LISTEN_FOR_DATA;
            }  
            break;
        }  


            case ON_WAIT_FOR_BLOCK_DATA_RESP:
            {
                if(rx_block_resp_pkt(txn) == ONS_BLOCK_FAIL)
                {
                    rv = TRUE;
                    on_state = ON_LISTEN_FOR_DATA;
                    break;
                }  

                if(on_state == ON_WAIT_FOR_BLOCK_DATA_RESP
                  && ont_inactive_or_expired(ONT_GENERAL_TIMER))
                {
                     
                    (*txn)->retry++;

                    if((*txn)->retry >= ON_MAX_RETRY)
                    {

                            pkt_hdlr.block_txn_hdlr(txn, ON_MAX_NONCE + 1,
                              ONS_BLOCK_FAIL, 0);




                        rv = TRUE;
                    }  
                    else
                    {

                            pkt_hdlr.block_txn_hdlr(txn, ON_MAX_NONCE + 1,
                              ONS_TIME_OUT, 0);




                    }  

                    on_state = ON_LISTEN_FOR_DATA;
                }  
                else if(block_complete)
                {
                    block_complete = FALSE;
                    rv = TRUE;
                    on_state = ON_LISTEN_FOR_DATA;
                }  
                break;
            }  

            case ON_SEND_BLOCK_DATA_RESP_WRITE_WAIT:
            {
                if(one_net_write_done())
                {
                    if(block_complete)
                    {
                        block_complete = FALSE;

                            ont_set_timer(ONT_GENERAL_TIMER,
                              ((*txn)->max_hops + 1)
                              * ONE_NET_RESPONSE_TIME_OUT);




                        on_state = ON_WAIT_FOR_BLOCK_DATA_END;
                    }  
                    else
                    {
                        rv = TRUE;   
                        on_state = ON_LISTEN_FOR_DATA;
                    }  
                }  
                break;
            }  

            case ON_WAIT_FOR_BLOCK_DATA_END:
            {
                if(rx_block_txn_ack(txn) == ONS_SUCCESS)
                {
                    rv = TRUE;
                }  

                 
                 
                if(on_state == ON_WAIT_FOR_BLOCK_DATA_END
                  && ont_inactive_or_expired(ONT_GENERAL_TIMER))
                {
                    on_state = ON_LISTEN_FOR_DATA;
                }  
                break;
            }  

            case ON_WAIT_FOR_STREAM_DATA_RESP:
            {
                if(rx_stream_resp_pkt(txn) == ONS_STREAM_FAIL)
                {
                    cur_stream = 0;
                    rv = TRUE;
                    on_state = ON_LISTEN_FOR_DATA;
                    break;
                }  

                if(on_state == ON_WAIT_FOR_STREAM_DATA_RESP
                  && ont_inactive_or_expired(ONT_GENERAL_TIMER))
                {
                     
                    (*txn)->retry++;

                    if((*txn)->retry >= ON_MAX_RETRY)
                    {
                        cur_stream = 0;

                            pkt_hdlr.stream_txn_hdlr(txn, ON_MAX_NONCE + 1,
                              ONS_STREAM_FAIL, 0);




                        rv = TRUE;
                    }  
                    else
                    {

                            pkt_hdlr.stream_txn_hdlr(txn, ON_MAX_NONCE + 1,
                              ONS_TIME_OUT, 0);




                    }  

                    on_state = ON_LISTEN_FOR_DATA;
                }  
                break;
            }  

            case ON_SEND_STREAM_DATA_RESP_WRITE_WAIT:
            {
                if(one_net_write_done())
                {
                    on_state = ON_LISTEN_FOR_DATA;
                }  
                break;
            }  


        case ON_INIT_SEND_DATA_RATE:
        {
            UInt8 data_rate;

            if(on_decode(&data_rate, &((*txn)->pkt[ON_DATA_RATE_IDX]),
              ON_DATA_RATE_WORD_SIZE) != ONS_SUCCESS
              || data_rate >= ONE_NET_DATA_RATE_LIMIT)
            {
                 
                (*txn)->priority = ONE_NET_NO_PRIORITY;
                rv = TRUE;
                on_state = ON_LISTEN_FOR_DATA;
                break;
            }  

            one_net_set_data_rate(data_rate);
            (*txn)->retry = 0;
            data_rate_result = 0;
            on_state = ON_SEND_DATA_RATE;
            break;
        }  

        case ON_SEND_DATA_RATE:
        {
            if((*txn)->retry < ON_MAX_DATA_RATE_TRIES)
            {
                if(check_for_clr_channel())
                {
                    one_net_write((*txn)->pkt, (*txn)->data_len);

                     

                        ont_set_timer(ONT_GENERAL_TIMER, ((*txn)->max_hops + 1)
                          * ONE_NET_RESPONSE_TIME_OUT);




                    on_state = ON_SEND_DATA_RATE_WRITE_WAIT;
                }  
            }  
            else
            {
                UInt8 data_rate;

                one_net_set_data_rate(on_base_param->data_rate);
                (*txn)->priority = ONE_NET_NO_PRIORITY;

                if(on_decode(&data_rate, &((*txn)->pkt[ON_DATA_RATE_IDX]),
                  ON_DATA_RATE_WORD_SIZE) == ONS_SUCCESS)
                {

                        pkt_hdlr.data_rate_hdlr(data_rate,
                          (const on_encoded_did_t * const)
                          &((*txn)->pkt[ONE_NET_ENCODED_DST_DID_IDX]),
                          data_rate_result);






                }  

                rv = TRUE;
                on_state = ON_LISTEN_FOR_DATA;
            }  
            break;
        }  

        case ON_RX_DATA_RATE_RESP:
        {

                UInt8 hops;

                if(rx_data_rate(*txn, FALSE, &hops) == ONS_SUCCESS)



            {
                data_rate_result++;
                (*txn)->retry++;
                on_state = ON_SEND_DATA_RATE;
            }  
            else if(ont_inactive_or_expired(ONT_GENERAL_TIMER))
            {
                (*txn)->retry++;
                on_state = ON_SEND_DATA_RATE;
            }  
            break;
        }  

        case ON_INIT_RX_DATA_RATE:
        {
            UInt8 data_rate;

            if(on_decode(&data_rate, &((*txn)->pkt[ON_DATA_RATE_IDX]),
              ON_DATA_RATE_WORD_SIZE) != ONS_SUCCESS
              || data_rate >= ONE_NET_DATA_RATE_LIMIT)
            {
                 
                (*txn)->priority = ONE_NET_NO_PRIORITY;
                rv = TRUE;
                on_state = ON_LISTEN_FOR_DATA;
                break;
            }  

            one_net_set_data_rate(data_rate);
            (*txn)->retry = 0;
            ont_set_timer(ONT_GENERAL_TIMER, ONE_NET_STAY_AWAKE_TIME);
            on_state = ON_RX_DATA_RATE;
            break;
        }  

        case ON_RX_DATA_RATE:
        {

                UInt8 on_hops_taken;


            if((*txn)->retry >= ON_MAX_RETRY ||
              ont_inactive_or_expired(ONT_GENERAL_TIMER))
            {
                one_net_set_data_rate(on_base_param->data_rate);
                rv = TRUE;
                on_state = ON_LISTEN_FOR_DATA;

                 
                 
                 
                 
                 
                 
                (*txn)->priority = ONE_NET_NO_PRIORITY;
                (*txn)->pkt[ONE_NET_ENCODED_PID_IDX] = 
                    ONE_NET_ENCODED_SINGLE_DATA;
            }  

                else if(rx_data_rate(*txn, TRUE, &on_hops_taken)
                  == ONS_SUCCESS)



            {
                (*txn)->retry++;
                 
                ont_set_timer(ONT_GENERAL_TIMER, 0);
                on_state = ON_SEND_DATA_RATE_RESP;
            }  
            break;
        }  

        case ON_SEND_DATA_RATE_RESP:
        {
            if(check_for_clr_channel())
            {
                one_net_write((*txn)->pkt, (*txn)->data_len);
                on_state = ON_SEND_DATA_RATE_RESP_WRITE_WAIT;
            }  
            break;
        }  

        case ON_SEND_DATA_RATE_RESP_WRITE_WAIT:
        {
            if(one_net_write_done())
            {
                 
                 
                ont_set_timer(ONT_GENERAL_TIMER, ONE_NET_STAY_AWAKE_TIME);
                on_state = ON_RX_DATA_RATE;
            }  
            break;
        }  

        case ON_INIT_STATE:
        {
             
             
            break;
        }  

        default:
        {
            on_state = ON_LISTEN_FOR_DATA;
            break;
        }  
    }  

    if(on_state == ON_LISTEN_FOR_DATA)
    {
        one_net_set_data_rate(on_base_param->data_rate);
         
    }  

    return rv;
}  

 
 
 

 
 
 
 
 

 










static BOOL check_for_clr_channel(void)
{
    if(ont_inactive_or_expired(ONT_GENERAL_TIMER))
    {
        ont_set_timer(ONT_GENERAL_TIMER, ONE_NET_CLR_CHANNEL_TIME);
        return one_net_channel_is_clear();
    }  

    return FALSE;
}  


 





































    static one_net_status_t rx_pkt_addr(
      const on_encoded_did_t * const EXPECTED_SRC_DID,
      on_encoded_did_t * const src_did)

{
    on_encoded_nid_t rx_nid;
    on_encoded_did_t rx_dst;
    one_net_status_t status;

    if(!EXPECTED_SRC_DID || !src_did)
    {
        return ONS_BAD_PARAM;
    }  

    if((status = one_net_look_for_pkt(ONE_NET_WAIT_FOR_SOF_TIME))
      != ONS_SUCCESS)
    {
        return status;
    }  

     
    if(one_net_read(rx_dst, sizeof(rx_dst)) != sizeof(rx_dst))
    {
        return ONS_READ_ERR;
    }  

    if((status = on_validate_dst_DID((const on_encoded_did_t * const)&rx_dst))
      != ONS_SUCCESS && status != ONS_BROADCAST_ADDR)
    {









            return status;

    }  

     
    if(one_net_read(rx_nid, sizeof(rx_nid)) != sizeof(rx_nid))
    {
        return ONS_READ_ERR;
    }  

    if(!on_is_my_NID((const on_encoded_nid_t * const)&rx_nid))
    {
        return ONS_NID_FAILED;
    }  

     
    if(one_net_read(*src_did, sizeof(on_encoded_did_t))
      != sizeof(on_encoded_did_t))
    {
        return ONS_READ_ERR;
    }  

     
    if(!on_encoded_did_equal(EXPECTED_SRC_DID, &ON_ENCODED_BROADCAST_DID))
    {
        if(!on_encoded_did_equal(EXPECTED_SRC_DID,
          (const on_encoded_did_t * const)src_did))
        {
             
             
            return ONS_INCORRECT_ADDR;
        }  
    }  










    return status;
}  


 


























static one_net_status_t rx_single_resp_pkt(on_txn_t ** txn)
{
    one_net_status_t status;
    on_encoded_did_t src_did;
    UInt8 pid;
    UInt8 txn_nonce, next_nonce;


        UInt8 hops = 0;
        BOOL mh = FALSE;


     
    if(!pkt_hdlr.single_data_hdlr)
    {
        return ONS_NOT_INIT;
    }  

    if(!txn || !*txn || !(*txn)->pkt
      || (*txn)->pkt_size < ON_MIN_ENCODED_PKT_SIZE)
    {
        return ONS_BAD_PARAM;
    }  

     
     
     





        if((status = rx_pkt_addr((const on_encoded_did_t * const)
          &((*txn)->pkt[ONE_NET_ENCODED_DST_DID_IDX]), &src_did))
          != ONS_SUCCESS)

    {
        return status;
    }  

     
    if(one_net_read(&pid, sizeof(pid)) != sizeof(pid))
    {
        return ONS_READ_ERR;
    }  


        if(pid != ONE_NET_ENCODED_SINGLE_DATA_ACK
          && pid != ONE_NET_ENCODED_SINGLE_DATA_ACK_STAY_AWAKE
          && pid != ONE_NET_ENCODED_SINGLE_DATA_NACK
          && pid != ONE_NET_ENCODED_MH_SINGLE_DATA_ACK
          && pid != ONE_NET_ENCODED_MH_SINGLE_DATA_ACK_STAY_AWAKE
          && pid != ONE_NET_ENCODED_MH_SINGLE_DATA_NACK)





    {



        return ONS_BAD_PKT_TYPE;
    }  

     
    if((status = rx_nonces(&txn_nonce, &next_nonce)) != ONS_SUCCESS)
    {
        return status;
    }  


        if(pid == ONE_NET_ENCODED_MH_SINGLE_DATA_ACK
          || pid == ONE_NET_ENCODED_MH_SINGLE_DATA_ACK_STAY_AWAKE
          || pid == ONE_NET_ENCODED_MH_SINGLE_DATA_NACK)
        {
            mh = TRUE;

            if((hops = on_hops_taken()) > ON_MAX_HOPS_LIMIT)
            {
                return ONS_INVALID_DATA;
            }  
        }  

        if(txn_nonce != (*txn)->expected_nonce
          || pid == ONE_NET_ENCODED_SINGLE_DATA_NACK
          || pid == ONE_NET_ENCODED_MH_SINGLE_DATA_NACK)




    {
        (*txn)->retry++;

        if((*txn)->retry >= ON_MAX_RETRY)
        {

                pkt_hdlr.single_txn_hdlr(txn, ON_MAX_NONCE + 1, ONS_SINGLE_FAIL,
                  hops);




            on_state = ON_LISTEN_FOR_DATA;
            return ONS_SINGLE_FAIL;
        }  

        if(txn_nonce != (*txn)->expected_nonce)
        {
            return ONS_INCORRECT_NONCE;
        }  
    }  

     
     
     
     


        if(pid == ONE_NET_ENCODED_SINGLE_DATA_NACK
          || pid == ONE_NET_ENCODED_MH_SINGLE_DATA_NACK)
        {
            status = pkt_hdlr.single_txn_hdlr(txn, next_nonce, ONS_RX_NACK,
              hops);






         
        ont_set_timer(ONT_GENERAL_TIMER, 0);
        on_state = ON_SEND_SINGLE_DATA_PKT;
    }  
    else
    {

            status = pkt_hdlr.single_txn_hdlr(txn, next_nonce,
              (pid == ONE_NET_ENCODED_SINGLE_DATA_ACK_STAY_AWAKE
              || pid == ONE_NET_ENCODED_MH_SINGLE_DATA_ACK_STAY_AWAKE)
              ? ONS_RX_STAY_AWAKE : ONS_SUCCESS, hops);

            if((pid == ONE_NET_ENCODED_SINGLE_DATA_ACK_STAY_AWAKE
              || pid == ONE_NET_ENCODED_MH_SINGLE_DATA_ACK_STAY_AWAKE)
              || status == ONS_SUCCESS)








        {
             
             
            (*txn)->data_len = (*txn)->pkt_size;
            
             
            ont_set_timer(ONT_GENERAL_TIMER, 0);


                if((status = on_build_pkt((*txn)->pkt, &((*txn)->data_len),
                  mh ? ONE_NET_ENCODED_MH_SINGLE_TXN_ACK
                  : ONE_NET_ENCODED_SINGLE_TXN_ACK,
                  (const on_encoded_did_t * const)&src_did, 0, 0,
                  mh ? hops : 0)) != ONS_SUCCESS)






            {
                on_state = ON_LISTEN_FOR_DATA;
                return status;
            }  
            on_state = ON_SEND_PKT;
        }
        else if(status == ONS_TXN_QUEUED)
        {
             
             
             
             
            ont_set_timer(ONT_GENERAL_TIMER, 0);
            on_state = ON_LISTEN_FOR_DATA;
        }  
         
    }  

    return status;
}  


 















static one_net_status_t rx_single_txn_ack(on_txn_t ** txn)
{
    one_net_status_t status;
    on_encoded_did_t src_did;
    UInt8 pid;

     
    if(!pkt_hdlr.single_data_hdlr)
    {
        return ONS_NOT_INIT;
    }  

    if(!txn || !(*txn) || !(*txn)->pkt
      || (*txn)->pkt_size < ON_MIN_ENCODED_PKT_SIZE)
    {
        return ONS_BAD_PARAM;
    }  

     
     
     
     
     
     





        if((status = rx_pkt_addr((const on_encoded_did_t * const)
          &((*txn)->pkt[ONE_NET_ENCODED_DST_DID_IDX]), &src_did))
          != ONS_SUCCESS)

    {
        return status;
    }  

     
    if(one_net_read(&pid, sizeof(pid)) != sizeof(pid))
    {
        return ONS_READ_ERR;
    }  

    switch(pid)
    {

            case ONE_NET_ENCODED_MH_SINGLE_TXN_ACK:      

        case ONE_NET_ENCODED_SINGLE_TXN_ACK:
        {
            (*txn)->priority = ONE_NET_NO_PRIORITY;
            on_state = ON_LISTEN_FOR_DATA;
            break;
        }  


            case ONE_NET_ENCODED_MH_SINGLE_DATA:         
            case ONE_NET_ENCODED_MH_REPEAT_SINGLE_DATA:  

        case ONE_NET_ENCODED_SINGLE_DATA:                
        case ONE_NET_ENCODED_REPEAT_SINGLE_DATA:
        {
            status = rx_single_data(pid,
              (const on_encoded_did_t * const)&src_did, txn);
            break;
        }  

        default:
        {
            return ONS_BAD_PKT_TYPE;
        }  
    }  

     
     
    ont_stop_timer(ONT_GENERAL_TIMER);
    return status;
}  



     
















    static one_net_status_t rx_block_resp_pkt(on_txn_t ** txn)
    {
        one_net_status_t status;
        on_encoded_did_t src_did;
        UInt8 pid;
        UInt8 txn_nonce, next_nonce;


            UInt8 hops = 0;
            BOOL mh = FALSE;


         
        if(!pkt_hdlr.block_txn_hdlr)
        {
            return ONS_NOT_INIT;
        }  

        if(!txn || !*txn || !(*txn)->pkt
          || (*txn)->pkt_size < ON_MIN_ENCODED_PKT_SIZE)
        {
            return ONS_BAD_PARAM;
        }  

         
         
         





            if((status = rx_pkt_addr(
              (const on_encoded_did_t * const)
              &((*txn)->pkt[ONE_NET_ENCODED_DST_DID_IDX]), &src_did))
              != ONS_SUCCESS)

        {
            return status;
        }  

         
        if(one_net_read(&pid, sizeof(pid)) != sizeof(pid))
        {
            return ONS_READ_ERR;
        }  


            if(pid != ONE_NET_ENCODED_BLOCK_DATA_ACK
              && pid != ONE_NET_ENCODED_BLOCK_DATA_NACK
              && pid != ONE_NET_ENCODED_MH_BLOCK_DATA_ACK
              && pid != ONE_NET_ENCODED_MH_BLOCK_DATA_NACK)




        {
            return ONS_BAD_PKT_TYPE;
        }  

         
        if((status = rx_nonces(&txn_nonce, &next_nonce)) != ONS_SUCCESS)
        {
            return status;
        }  


            if(pid == ONE_NET_ENCODED_MH_BLOCK_DATA_ACK)
            {
                mh = TRUE;

                if((hops = on_hops_taken()) > ON_MAX_HOPS_LIMIT)
                {
                    return ONS_INVALID_DATA;
                }  
            }  

            if(txn_nonce != (*txn)->expected_nonce
              || pid == ONE_NET_ENCODED_BLOCK_DATA_NACK
              || pid == ONE_NET_ENCODED_MH_BLOCK_DATA_NACK)




        {
            (*txn)->retry++;

            if((*txn)->retry >= ON_MAX_RETRY)
            {

                    pkt_hdlr.block_txn_hdlr(txn, ON_MAX_NONCE + 1,
                      ONS_BLOCK_FAIL, hops);




                return ONS_BLOCK_FAIL;
            }  

            if(txn_nonce != (*txn)->expected_nonce)
            {
                return ONS_INCORRECT_NONCE;
            }  
        }  

        on_state = ON_LISTEN_FOR_DATA;

            if(pid == ONE_NET_ENCODED_BLOCK_DATA_NACK
              || pid == ONE_NET_ENCODED_MH_BLOCK_DATA_NACK)
            {
                if((status = pkt_hdlr.block_txn_hdlr(txn, next_nonce,
                  ONS_RX_NACK, hops)) == ONS_SUCCESS)
                {
                    status = ONS_RX_NACK;
                }  
            }  










        else
        {

                status = pkt_hdlr.block_txn_hdlr(txn, next_nonce, ONS_SUCCESS,
                  hops);




            if(status == ONS_BLOCK_END)
            {
                 
                (*txn)->data_len = (*txn)->pkt_size;

                 
                ont_set_timer(ONT_GENERAL_TIMER, 0);


                    if((status = on_build_pkt((*txn)->pkt, &((*txn)->data_len),
                      mh ? ONE_NET_ENCODED_MH_BLOCK_TXN_ACK
                      : ONE_NET_ENCODED_BLOCK_TXN_ACK,
                      (const on_encoded_did_t * const)&src_did, 0, 0,
                      mh ? hops : 0)) != ONS_SUCCESS)






                {
                    block_complete = TRUE;
                    return status;
                }  

                on_state = ON_SEND_PKT;
            }  
            else
            {
                ont_stop_timer(ONT_GENERAL_TIMER);
            }  
        }  

        return status;
    }  


     













    static one_net_status_t rx_block_txn_ack(on_txn_t ** txn)
    {
        one_net_status_t status;
        on_encoded_did_t src_did;
        UInt8 pid;

         
        if(!pkt_hdlr.block_txn_hdlr)
        {
            return ONS_NOT_INIT;
        }  

        if(!txn || !(*txn) || !(*txn)->pkt
          || (*txn)->pkt_size < ON_MIN_ENCODED_PKT_SIZE)
        {
            return ONS_BAD_PARAM;
        }  

         
         
         






            if((status = rx_pkt_addr(
              (const on_encoded_did_t * const)
              &((*txn)->pkt[ONE_NET_ENCODED_DST_DID_IDX]), &src_did))
              != ONS_SUCCESS)

        {
            return status;
        }  

         
        if(one_net_read(&pid, sizeof(pid)) != sizeof(pid))
        {
            return ONS_READ_ERR;
        }  


            if(pid == ONE_NET_ENCODED_REPEAT_BLOCK_DATA
              || pid == ONE_NET_ENCODED_MH_REPEAT_BLOCK_DATA)



        {
             
             
             
             
            on_state = ON_SEND_BLOCK_DATA_RESP;
        }  

            else if(pid == ONE_NET_ENCODED_BLOCK_TXN_ACK
              || pid == ONE_NET_ENCODED_MH_BLOCK_TXN_ACK)
            {
                 
                 
                 
                pkt_hdlr.block_txn_hdlr(txn, ON_MAX_NONCE + 1, ONS_BLOCK_END,
                  0);







            ont_stop_timer(ONT_GENERAL_TIMER);
            (*txn)->priority = ONE_NET_NO_PRIORITY;
            on_state = ON_LISTEN_FOR_DATA;
        }  
        else
        {
            return ONS_BAD_PKT_TYPE;
        }  

        return status;
    }  


     

















    static one_net_status_t rx_stream_resp_pkt(on_txn_t ** txn)
    {
        one_net_status_t status;
        on_encoded_did_t src_did;
        UInt8 pid;
        UInt8 txn_nonce, next_nonce;


            UInt8 hops = 0;


         
        if(!pkt_hdlr.stream_txn_hdlr)
        {
            return ONS_NOT_INIT;
        }  

        if(!txn || !*txn || !(*txn)->pkt
          || (*txn)->pkt_size < ON_MIN_ENCODED_PKT_SIZE)
        {
            return ONS_BAD_PARAM;
        }  

         
         
         






            if((status = rx_pkt_addr(
              (const on_encoded_did_t * const)
              &((*txn)->pkt[ONE_NET_ENCODED_DST_DID_IDX]), &src_did))
              != ONS_SUCCESS)

        {
            return status;
        }  

         
        if(one_net_read(&pid, sizeof(pid)) != sizeof(pid))
        {
            return ONS_READ_ERR;
        }  

        switch(pid)
        {

                case ONE_NET_ENCODED_MH_STREAM_KEEP_ALIVE:   

            case ONE_NET_ENCODED_STREAM_KEEP_ALIVE:
            {
                 
                break;
            }  


                case ONE_NET_ENCODED_MH_SINGLE_DATA:         
                case ONE_NET_ENCODED_MH_REPEAT_SINGLE_DATA:

            case ONE_NET_ENCODED_SINGLE_DATA:                
            case ONE_NET_ENCODED_REPEAT_SINGLE_DATA:
            {
                 
                cur_stream = *txn;

                status = rx_single_data(pid,
                  (const on_encoded_did_t * const)&src_did, txn);

                if(*txn != cur_stream)
                {
                    if(status == ONS_STREAM_END)
                    {
                         
                        cur_stream = 0;
                    }  

                    on_state = ON_SEND_SINGLE_DATA_RESP; 
                }  

                return status;
                break;
            }  

            default:
            {
                return ONS_BAD_PKT_TYPE;
                break;
            }  
        }  

         
        if((status = rx_nonces(&txn_nonce, &next_nonce)) != ONS_SUCCESS)
        {
            return status;
        }  

        if(txn_nonce != (*txn)->expected_nonce)
        {
            (*txn)->retry++;

            if((*txn)->retry >= ON_MAX_RETRY)
            {
                cur_stream = 0;

                    pkt_hdlr.stream_txn_hdlr(txn, ON_MAX_NONCE + 1,
                      ONS_STREAM_FAIL, 0);




                return ONS_STREAM_FAIL;
            }  

            return ONS_INCORRECT_NONCE;
        }  

        on_state = ON_LISTEN_FOR_DATA;

            if(pid == ONE_NET_ENCODED_MH_STREAM_KEEP_ALIVE
              && (hops = on_hops_taken()) > ON_MAX_HOPS_LIMIT)
            {
                return ONS_INVALID_DATA;
            }  

            status = pkt_hdlr.stream_txn_hdlr(txn, next_nonce, ONS_SUCCESS,
              hops);



        ont_stop_timer(ONT_GENERAL_TIMER);

        return status;
    }  



 




















    static one_net_status_t rx_data_rate(on_txn_t * const txn,
      const BOOL RECEIVER, UInt8 * const hops)




{
    one_net_status_t status;
    on_encoded_did_t src_did;
    UInt8 i;
    UInt8 pid, data_rate;
    UInt8 test_pattern[ON_TEST_PATTERN_SIZE];

    if(!txn || !(txn->pkt) || txn->pkt_size < ON_MIN_ENCODED_PKT_SIZE)
    {
        return ONS_BAD_PARAM;
    }  

    if(RECEIVER)
    {
         
        one_net_memmove(&(txn->pkt[ONE_NET_ENCODED_DST_DID_IDX]),
          ON_ENCODED_BROADCAST_DID, sizeof(ON_ENCODED_BROADCAST_DID));
    }  

     
     
     





        if((status = rx_pkt_addr((const on_encoded_did_t * const)
          &(txn->pkt[ONE_NET_ENCODED_DST_DID_IDX]), &src_did)) != ONS_SUCCESS)

    {
        return status;
    }  

     
    if(one_net_read(&pid, sizeof(pid)) != sizeof(pid))
    {
        return ONS_READ_ERR;
    }  


        if(pid != ONE_NET_ENCODED_DATA_RATE_TEST
          && pid != ONE_NET_ENCODED_MH_DATA_RATE_TEST)



    {
        return ONS_BAD_PKT_TYPE;
    }  

     
    if(one_net_read(&data_rate, sizeof(data_rate)) != sizeof(data_rate))
    {
        return ONS_READ_ERR;
    }  

    if(data_rate != txn->pkt[ON_DATA_RATE_IDX])
    {
        return ONS_INVALID_DATA;
    }  

     
    if(one_net_read(test_pattern, sizeof(test_pattern)) != sizeof(test_pattern))
    {
        return ONS_READ_ERR;
    }  

    for(i = 0; i < ON_TEST_PATTERN_SIZE; i++)
    {
        if(test_pattern[i] != ON_TEST_PATTERN)
        {
            return ONS_INVALID_DATA;
        }  
    }  


        if(pid == ONE_NET_ENCODED_MH_DATA_RATE_TEST)
        {
            if((*hops = on_hops_taken()) > ON_MAX_HOPS_LIMIT)
            {
                return ONS_INVALID_DATA;
            }  
        }  


    if(RECEIVER)
    {
         
         
        one_net_memmove(&(txn->pkt[ONE_NET_ENCODED_DST_DID_IDX]), src_did,
          sizeof(src_did));

            if(pid == ONE_NET_ENCODED_MH_DATA_RATE_TEST)
            {
                status = on_build_hops(&(txn->pkt[txn->pkt_size - 1]),
                  ON_MAX_HOPS_LIMIT, ON_MAX_HOPS_LIMIT);
            }  

    }  

    return status;
}  


 












static one_net_status_t rx_single_data(const UInt8 PID,
  const on_encoded_did_t * const SRC_DID, on_txn_t ** txn)
{
    one_net_status_t status = ONS_INTERNAL_ERR;
    UInt8 raw_pld[ON_RAW_SINGLE_PLD_SIZE];


        UInt8 hops = 0;


    if((status = rx_payload(raw_pld, ON_ENCODED_SINGLE_PLD_SIZE))
      != ONS_SUCCESS)
    {
        return status;
    }  


        if(PID == ONE_NET_ENCODED_MH_SINGLE_DATA
          || PID == ONE_NET_ENCODED_MH_REPEAT_SINGLE_DATA)
        {
            hops = on_hops_taken();
        }  

        status = (*pkt_hdlr.single_data_hdlr)(PID, SRC_DID, raw_pld, txn, hops);




    if(*txn)
    {
        on_state = ON_SEND_SINGLE_DATA_RESP;
    }  
    else
    {
        on_state = ON_LISTEN_FOR_DATA;
    }  

    return status;
}  



     












    static one_net_status_t rx_block_data(const UInt8 PID,
      const on_encoded_did_t * const SRC_DID, on_txn_t ** txn)
    {
        one_net_status_t status = ONS_INTERNAL_ERR;
        UInt8 raw_pld[ON_RAW_BLOCK_STREAM_PLD_SIZE];

            UInt8 hops = 0;


        if((status = rx_payload(raw_pld, ON_ENCODED_BLOCK_STREAM_PLD_SIZE))
          != ONS_SUCCESS)
        {
            return status;
        }  


            if(PID == ONE_NET_ENCODED_MH_BLOCK_DATA
              || PID == ONE_NET_ENCODED_MH_REPEAT_BLOCK_DATA)
            {
                hops = on_hops_taken();
            }  

            status = (*pkt_hdlr.block_data_hdlr)(PID, SRC_DID, raw_pld, txn,
              hops);




        if(status == ONS_BLOCK_END)
        {
            block_complete = TRUE;
        }  

        if((status == ONS_SUCCESS || status == ONS_BLOCK_END) && *txn)
        {
            on_state = ON_SEND_BLOCK_DATA_RESP;
        }  

        return status;
    }  


     











    static one_net_status_t rx_stream_data(const UInt8 PID,
      const on_encoded_did_t * const SRC_DID, on_txn_t ** txn)
    {
        one_net_status_t status = ONS_INTERNAL_ERR;
        UInt8 raw_pld[ON_RAW_BLOCK_STREAM_PLD_SIZE];

            UInt8 hops = 0;


        if((status = rx_payload(raw_pld, ON_ENCODED_BLOCK_STREAM_PLD_SIZE))
          != ONS_SUCCESS)
        {
            return status;
        }  


            if(PID == ONE_NET_ENCODED_MH_STREAM_DATA)
            {
                hops = on_hops_taken();
            }  

            status = (*pkt_hdlr.stream_data_hdlr)(PID, SRC_DID, raw_pld, txn,
              hops);




        if(*txn)
        {
            if(status == ONS_SUCCESS)
            {
                on_state = ON_SEND_STREAM_DATA_RESP;
            }  
            else if(status == ONS_STREAM_END)
            {
                cur_stream = 0;
                on_state = ON_SEND_SINGLE_DATA_PKT;
            }  
        }  
 
        return status;
    }  



 










static one_net_status_t rx_payload(UInt8 * const raw_pld,
  const UInt8 ENCODED_LEN)
{
    UInt8 rx_encoded_pld[ON_ENCODED_BLOCK_STREAM_PLD_SIZE];

    if(!raw_pld || ENCODED_LEN > sizeof(rx_encoded_pld))
    {
        return ONS_BAD_PARAM;
    }  

     
    if(one_net_read(rx_encoded_pld, ENCODED_LEN) != ENCODED_LEN)
    {
        return ONS_READ_ERR;
    }  

     
    return on_decode(raw_pld, rx_encoded_pld, ENCODED_LEN);
}  


 













static one_net_status_t rx_nonces(UInt8 * const txn_nonce,
  UInt8 * const next_nonce)
{
    one_net_status_t status;
    UInt8 encoded_nonce;

    if(!txn_nonce || !next_nonce)
    {
        return ONS_BAD_PARAM;
    }  

     
    if(one_net_read(&encoded_nonce, sizeof(encoded_nonce))
      != sizeof(encoded_nonce))
    {
        return ONS_READ_ERR;
    }  

    if((status = on_decode(txn_nonce, &encoded_nonce, sizeof(encoded_nonce)))
      != ONS_SUCCESS)
    {
        return status;
    }  

     
    if(one_net_read(&encoded_nonce, sizeof(encoded_nonce))
      != sizeof(encoded_nonce))
    {
        return ONS_READ_ERR;
    }  

    if((status = on_decode(next_nonce, &encoded_nonce, sizeof(encoded_nonce)))
      != ONS_SUCCESS)
    {
        return status;
    }  

    *txn_nonce >>= ON_TXN_NONCE_SHIFT;
    *txn_nonce &= ON_TXN_NONCE_PARSE_MASK;

    *next_nonce >>= ON_TXN_NONCE_SHIFT;
    *next_nonce &= ON_TXN_NONCE_PARSE_MASK;

    return ONS_SUCCESS;
}  















































































































































































 
 
 

 


ONE-NET Simple Device Examples
------------------------------

System:

This design example includes the hardware and software files required to implement an embedded ONE-NET design for simple applications, such as a light switch or garage door opener.


Hardware:

The hardware for this design example is based on the $TRANSCEIVER transceiver and the $MICRO_CONTROLLER microcontroller (it is possible to port the design to other microcontrollers and transceivers). The schematic and parts list for this design is in PDF file format.

The operating voltage for this design is 3.0 - 3.6 VDC. No regulator or power management design is illustrated with this example. If the design is to be used on a battery powered system, several different methods are available to provide Low Battery Indication (LBI), as required in the ONE-NET specification.

In the example schematic, an LED is shown an output device. This could, of course, be replaced by whatever output the user desires.

An antenna design is not specified, as this is very application specific. Developers using this design should choose an appropriate antenna: monopole, loop, dipole, helical, slot, etc. The antenna matching network incorporated in this example is for a nominal 50ohm impedance antenna. Other antennas may require some optimizing of this matching network.


Software:

The included software demonstrates two examples of simple ONE-NET devices: an input device such as a switch, and an output device such as an outlet or light is demonstrated. $DEVELOPMENT_ENVIRONMENT

The examples demonstrate the use of the ONE-NET MAC and application layers, as well as the hardware-specific code that needs to be implemented for ONE-NET to run properly. Initializing and running ONE-NET, as well as saving parameters in the R8C data flash section, are demonstrated.

Four main folders contain the software. The "applications" folder holds the source for the main application for each example. These are in "switch_example.c" and "output_example.c", and both are hardware independent.

The "one_net" folder contains four sub-folders. The "mac" folder holds the MAC layer functionality, the "app" folder holds the application layer functionality, the "utility" folder holds the utility functionality (such as the XTEA, CRC, and simple random number generator) needed by ONE-NET, and the "port_specific" folder holds interfaces for the callbacks that ONE-NET needs.

The "mac" folder contains the base implementations of ONE-NET in the one_net files. The "one_net_client" files derive from the "one_net" and contain the implementation for ONE-NET clients. Because these examples are simple clients, the preprocessor directive "_SIMPLE_CLIENT" is defined when the ONE-NET files are compiled. This prevents the inclusion of block and stream functionality by a device that does not need them, resulting in smaller code.

The "app" folder contains the seperate modules used by various ONE-NET devices. These modules include functionality for sending or receiving only those messages that a device can handle. For example, a switch would include the "switch.h" and "switch.c" files in the example to send the "SWITCH" command everytime the switch position is changed. A simple output device such as a light or outlet also include the switch files, as it receives the "SWITCH" command. All devices need to include the "one_net_application" files.

The interfaces in "port_specific" must be created by the ONE-NET device implementor, and are application dependent.

The "processors" folder contains sub-folders for different processor manufacturers. Both of these examples use the $MICRO_CONTROLLER processor, so only "$MICRO_CONTROLLER_DIR" is included. The "$MICRO_CONTROLLER_DIR" folder contains two sub-folders, "$IDE_DIR", and "src". The src folder contains source code that is specific to the processor. The "$IDE_DIR" folder contains workspace and project files for the $IDE IDE. If a different processor is chosen, or the board design is changed, the files in "processors/$MICRO_CONTROLLER_DIR/src" may also need to be updated to reflect the hardware modifications.

The remaining folder is "transceivers". This contains subfolders for the RF transceiver. The "$XCVR_DIR" folder contains the necessary files for communicating with the $TRANSCEIVER transceiver. The "tal.h" file in the "$XCVR_DIR" folder contains a transceiver interface that is implemented in "$XCVR_IMPLEMENTATION_FILE."
